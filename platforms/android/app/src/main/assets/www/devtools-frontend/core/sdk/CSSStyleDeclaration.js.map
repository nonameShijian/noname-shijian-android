{"version":3,"file":"CSSStyleDeclaration.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/CSSStyleDeclaration.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2016 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TextUtils from '../../models/text_utils/text_utils.js';\nimport type * as Protocol from '../../generated/protocol.js';\n\nimport {cssMetadata} from './CSSMetadata.js';\nimport {type CSSModel, type Edit} from './CSSModel.js';\nimport {CSSProperty} from './CSSProperty.js';\nimport {type CSSRule} from './CSSRule.js';\nimport {type Target} from './Target.js';\n\nexport class CSSStyleDeclaration {\n  readonly #cssModelInternal: CSSModel;\n  parentRule: CSSRule|null;\n  #allPropertiesInternal!: CSSProperty[];\n  styleSheetId!: Protocol.CSS.StyleSheetId|undefined;\n  range!: TextUtils.TextRange.TextRange|null;\n  cssText!: string|undefined;\n  #shorthandValues!: Map<string, string>;\n  #shorthandIsImportant!: Set<string>;\n  #activePropertyMap!: Map<string, CSSProperty>;\n  #leadingPropertiesInternal!: CSSProperty[]|null;\n  type: Type;\n  constructor(cssModel: CSSModel, parentRule: CSSRule|null, payload: Protocol.CSS.CSSStyle, type: Type) {\n    this.#cssModelInternal = cssModel;\n    this.parentRule = parentRule;\n    this.#reinitialize(payload);\n    this.type = type;\n  }\n\n  rebase(edit: Edit): void {\n    if (this.styleSheetId !== edit.styleSheetId || !this.range) {\n      return;\n    }\n    if (edit.oldRange.equal(this.range)) {\n      this.#reinitialize((edit.payload as Protocol.CSS.CSSStyle));\n    } else {\n      this.range = this.range.rebaseAfterTextEdit(edit.oldRange, edit.newRange);\n      for (let i = 0; i < this.#allPropertiesInternal.length; ++i) {\n        this.#allPropertiesInternal[i].rebase(edit);\n      }\n    }\n  }\n\n  #reinitialize(payload: Protocol.CSS.CSSStyle): void {\n    this.styleSheetId = payload.styleSheetId;\n    this.range = payload.range ? TextUtils.TextRange.TextRange.fromObject(payload.range) : null;\n\n    const shorthandEntries = payload.shorthandEntries;\n    this.#shorthandValues = new Map();\n    this.#shorthandIsImportant = new Set();\n    for (let i = 0; i < shorthandEntries.length; ++i) {\n      this.#shorthandValues.set(shorthandEntries[i].name, shorthandEntries[i].value);\n      if (shorthandEntries[i].important) {\n        this.#shorthandIsImportant.add(shorthandEntries[i].name);\n      }\n    }\n\n    this.#allPropertiesInternal = [];\n\n    if (payload.cssText && this.range) {\n      const cssText = new TextUtils.Text.Text(payload.cssText);\n      let start = {line: this.range.startLine, column: this.range.startColumn};\n\n      const longhands = [];\n      for (const cssProperty of payload.cssProperties) {\n        const range = cssProperty.range;\n        if (!range) {\n          continue;\n        }\n        this.#parseUnusedText(cssText, start.line, start.column, range.startLine, range.startColumn);\n        start = {line: range.endLine, column: range.endColumn};\n        const parsedProperty = CSSProperty.parsePayload(this, this.#allPropertiesInternal.length, cssProperty);\n        this.#allPropertiesInternal.push(parsedProperty);\n        for (const longhand of parsedProperty.getLonghandProperties()) {\n          longhands.push(longhand);\n        }\n      }\n      for (const longhand of longhands) {\n        longhand.index = this.#allPropertiesInternal.length;\n        this.#allPropertiesInternal.push(longhand);\n      }\n      this.#parseUnusedText(cssText, start.line, start.column, this.range.endLine, this.range.endColumn);\n    } else {\n      for (const cssProperty of payload.cssProperties) {\n        this.#allPropertiesInternal.push(\n            CSSProperty.parsePayload(this, this.#allPropertiesInternal.length, cssProperty));\n      }\n    }\n\n    this.#generateSyntheticPropertiesIfNeeded();\n    this.#computeInactiveProperties();\n\n    // TODO(changhaohan): verify if this #activePropertyMap is still necessary, or if it is\n    // providing different information against the activeness in allPropertiesInternal.\n    this.#activePropertyMap = new Map();\n    for (const property of this.#allPropertiesInternal) {\n      if (!property.activeInStyle()) {\n        continue;\n      }\n      this.#activePropertyMap.set(property.name, property);\n    }\n\n    this.cssText = payload.cssText;\n    this.#leadingPropertiesInternal = null;\n  }\n\n  #parseUnusedText(\n      cssText: TextUtils.Text.Text, startLine: number, startColumn: number, endLine: number, endColumn: number): void {\n    const tr = new TextUtils.TextRange.TextRange(startLine, startColumn, endLine, endColumn);\n    if (!this.range) {\n      return;\n    }\n    const missingText = cssText.extract(tr.relativeTo(this.range.startLine, this.range.startColumn));\n\n    // Try to fit the malformed css into properties.\n    const lines = missingText.split('\\n');\n    const context: SkipBlockContext = {\n      inComment: false,\n      nestedBlocks: 0,\n      validContent: '',\n    };\n    for (let lineNumber = 0; lineNumber < lines.length; lineNumber++) {\n      skipBlocks(lines[lineNumber], context);\n      if (context.nestedBlocks > 0 || !context.validContent) {\n        // We skip the whole line if we have entered a nested block.\n        continue;\n      }\n\n      let column = 0;\n      for (const property of context.validContent.split(';')) {\n        const trimmedProperty = property.trim();\n        if (trimmedProperty) {\n          let name;\n          let value;\n          const colonIndex = trimmedProperty.indexOf(':');\n          if (colonIndex === -1) {\n            name = trimmedProperty;\n            value = '';\n          } else {\n            name = trimmedProperty.substring(0, colonIndex).trim();\n            value = trimmedProperty.substring(colonIndex + 1).trim();\n          }\n          const range = new TextUtils.TextRange.TextRange(lineNumber, column, lineNumber, column + property.length);\n          this.#allPropertiesInternal.push(new CSSProperty(\n              this, this.#allPropertiesInternal.length, name, value, false, false, false, false, property,\n              range.relativeFrom(startLine, startColumn)));\n        }\n        column += property.length + 1;\n      }\n    }\n\n    function skipBlocks(text: string, context: SkipBlockContext): void {\n      context.validContent = '';\n      for (let i = 0; i < text.length; i++) {\n        if (!context.inComment) {\n          if (text[i] === '{') {\n            context.nestedBlocks++;\n            // Since we don't retrospectively parse the block's selector, we treat anything\n            // between the last `;` and `{` as the block's selector and ignore it.\n            context.validContent = context.validContent.substring(0, context.validContent.lastIndexOf(';') + 1);\n          } else if (text[i] === '}') {\n            context.nestedBlocks--;\n          } else if (text.substring(i, i + 2) === '/*') {\n            context.inComment = true;\n            i++;\n          } else if (context.nestedBlocks === 0) {\n            context.validContent += text[i];\n          }\n        } else if (text.substring(i, i + 2) === '*/') {\n          context.inComment = false;\n          i++;\n        }\n      }\n    }\n  }\n\n  #generateSyntheticPropertiesIfNeeded(): void {\n    if (this.range) {\n      return;\n    }\n\n    if (!this.#shorthandValues.size) {\n      return;\n    }\n\n    const propertiesSet = new Set<string>();\n    for (const property of this.#allPropertiesInternal) {\n      propertiesSet.add(property.name);\n    }\n\n    const generatedProperties = [];\n    // For style-based properties, generate #shorthands with values when possible.\n    for (const property of this.#allPropertiesInternal) {\n      // For style-based properties, try generating #shorthands.\n      const shorthands = cssMetadata().getShorthands(property.name) || [];\n      for (const shorthand of shorthands) {\n        if (propertiesSet.has(shorthand)) {\n          continue;\n        }  // There already is a shorthand this #longhand falls under.\n        const shorthandValue = this.#shorthandValues.get(shorthand);\n        if (!shorthandValue) {\n          continue;\n        }  // Never generate synthetic #shorthands when no value is available.\n\n        // Generate synthetic shorthand we have a value for.\n        const shorthandImportance = Boolean(this.#shorthandIsImportant.has(shorthand));\n        const shorthandProperty = new CSSProperty(\n            this, this.allProperties().length, shorthand, shorthandValue, shorthandImportance, false, true, false);\n        generatedProperties.push(shorthandProperty);\n        propertiesSet.add(shorthand);\n      }\n    }\n    this.#allPropertiesInternal = this.#allPropertiesInternal.concat(generatedProperties);\n  }\n\n  #computeLeadingProperties(): CSSProperty[] {\n    function propertyHasRange(property: CSSProperty): boolean {\n      return Boolean(property.range);\n    }\n\n    if (this.range) {\n      return this.#allPropertiesInternal.filter(propertyHasRange);\n    }\n\n    const leadingProperties = [];\n    for (const property of this.#allPropertiesInternal) {\n      const shorthands = cssMetadata().getShorthands(property.name) || [];\n      let belongToAnyShorthand = false;\n      for (const shorthand of shorthands) {\n        if (this.#shorthandValues.get(shorthand)) {\n          belongToAnyShorthand = true;\n          break;\n        }\n      }\n      if (!belongToAnyShorthand) {\n        leadingProperties.push(property);\n      }\n    }\n\n    return leadingProperties;\n  }\n\n  leadingProperties(): CSSProperty[] {\n    if (!this.#leadingPropertiesInternal) {\n      this.#leadingPropertiesInternal = this.#computeLeadingProperties();\n    }\n    return this.#leadingPropertiesInternal;\n  }\n\n  target(): Target {\n    return this.#cssModelInternal.target();\n  }\n\n  cssModel(): CSSModel {\n    return this.#cssModelInternal;\n  }\n\n  #computeInactiveProperties(): void {\n    const activeProperties = new Map<string, CSSProperty>();\n    // The order of the properties are:\n    // 1. regular property, including shorthands\n    // 2. longhand components from shorthands, in the order of their shorthands.\n    const processedLonghands = new Set();\n    for (const property of this.#allPropertiesInternal) {\n      if (property.disabled || !property.parsedOk) {\n        property.setActive(false);\n        continue;\n      }\n      if (processedLonghands.has(property)) {\n        continue;\n      }\n      const metadata = cssMetadata();\n      const canonicalName = metadata.canonicalPropertyName(property.name);\n      for (const longhand of property.getLonghandProperties()) {\n        const activeLonghand = activeProperties.get(longhand.name);\n        if (!activeLonghand) {\n          activeProperties.set(longhand.name, longhand);\n        } else if (!activeLonghand.important || longhand.important) {\n          activeLonghand.setActive(false);\n          activeProperties.set(longhand.name, longhand);\n        } else {\n          longhand.setActive(false);\n        }\n        processedLonghands.add(longhand);\n      }\n\n      const activeProperty = activeProperties.get(canonicalName);\n      if (!activeProperty) {\n        activeProperties.set(canonicalName, property);\n      } else if (!activeProperty.important || property.important) {\n        activeProperty.setActive(false);\n        activeProperties.set(canonicalName, property);\n      } else {\n        property.setActive(false);\n      }\n    }\n  }\n\n  allProperties(): CSSProperty[] {\n    return this.#allPropertiesInternal;\n  }\n\n  hasActiveProperty(name: string): boolean {\n    return this.#activePropertyMap.has(name);\n  }\n\n  getPropertyValue(name: string): string {\n    const property = this.#activePropertyMap.get(name);\n    return property ? property.value : '';\n  }\n\n  isPropertyImplicit(name: string): boolean {\n    const property = this.#activePropertyMap.get(name);\n    return property ? property.implicit : false;\n  }\n\n  propertyAt(index: number): CSSProperty|null {\n    return (index < this.allProperties().length) ? this.allProperties()[index] : null;\n  }\n\n  pastLastSourcePropertyIndex(): number {\n    for (let i = this.allProperties().length - 1; i >= 0; --i) {\n      if (this.allProperties()[i].range) {\n        return i + 1;\n      }\n    }\n    return 0;\n  }\n\n  #insertionRange(index: number): TextUtils.TextRange.TextRange {\n    const property = this.propertyAt(index);\n    if (property && property.range) {\n      return property.range.collapseToStart();\n    }\n    if (!this.range) {\n      throw new Error('CSSStyleDeclaration.range is null');\n    }\n    return this.range.collapseToEnd();\n  }\n\n  newBlankProperty(index?: number): CSSProperty {\n    index = (typeof index === 'undefined') ? this.pastLastSourcePropertyIndex() : index;\n    const property = new CSSProperty(this, index, '', '', false, false, true, false, '', this.#insertionRange(index));\n    return property;\n  }\n\n  setText(text: string, majorChange: boolean): Promise<boolean> {\n    if (!this.range || !this.styleSheetId) {\n      return Promise.resolve(false);\n    }\n    return this.#cssModelInternal.setStyleText(this.styleSheetId, this.range, text, majorChange);\n  }\n\n  insertPropertyAt(index: number, name: string, value: string, userCallback?: ((arg0: boolean) => void)): void {\n    void this.newBlankProperty(index).setText(name + ': ' + value + ';', false, true).then(userCallback);\n  }\n\n  appendProperty(name: string, value: string, userCallback?: ((arg0: boolean) => void)): void {\n    this.insertPropertyAt(this.allProperties().length, name, value, userCallback);\n  }\n}\n\n// TODO(crbug.com/1167717): Make this a const enum again\n// eslint-disable-next-line rulesdir/const_enum\nexport enum Type {\n  Regular = 'Regular',\n  Inline = 'Inline',\n  Attributes = 'Attributes',\n}\n\ntype SkipBlockContext = {\n  inComment: boolean,\n  nestedBlocks: number,\n  validContent: string,\n};\n"]}