{"version":3,"file":"TimingsTrackAppender.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/TimingsTrackAppender.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as TraceEngine from '../../models/trace/trace.js';\nimport type * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\n\nimport {\n  type CompatibilityTracksAppender,\n  type TrackAppender,\n  type HighlightedEntryInfo,\n  type TrackAppenderName,\n} from './CompatibilityTracksAppender.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport {TimelineFlameChartMarker} from './TimelineFlameChartView.js';\nimport {type TimelineMarkerStyle} from './TimelineUIUtils.js';\nimport type * as Common from '../../core/common/common.js';\nimport {buildGroupStyle, buildTrackHeader, getFormattedTime} from './AppenderUtils.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  timings: 'Timings',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/TimingsTrackAppender.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class TimingsTrackAppender implements TrackAppender {\n  readonly appenderName: TrackAppenderName = 'Timings';\n\n  #colorGenerator: Common.Color.Generator;\n  #compatibilityBuilder: CompatibilityTracksAppender;\n  #flameChartData: PerfUI.FlameChart.FlameChartTimelineData;\n  #traceParsedData: Readonly<TraceEngine.Handlers.Migration.PartialTraceData>;\n\n  constructor(\n      compatibilityBuilder: CompatibilityTracksAppender, flameChartData: PerfUI.FlameChart.FlameChartTimelineData,\n      traceParsedData: TraceEngine.Handlers.Migration.PartialTraceData, colorGenerator: Common.Color.Generator) {\n    this.#compatibilityBuilder = compatibilityBuilder;\n    this.#colorGenerator = colorGenerator;\n    this.#flameChartData = flameChartData;\n    this.#traceParsedData = traceParsedData;\n  }\n\n  /**\n   * Appends into the flame chart data the data corresponding to the\n   * timings track.\n   * @param trackStartLevel the horizontal level of the flame chart events where\n   * the track's events will start being appended.\n   * @param expanded wether the track should be rendered expanded.\n   * @returns the first available level to append more data after having\n   * appended the track's events.\n   */\n  appendTrackAtLevel(trackStartLevel: number, expanded?: boolean): number {\n    const allMarkerEvents = this.#traceParsedData.PageLoadMetrics.allMarkerEvents;\n    const performanceMarks = this.#traceParsedData.UserTimings.performanceMarks;\n    const performanceMeasures = this.#traceParsedData.UserTimings.performanceMeasures;\n    const timestampEvents = this.#traceParsedData.UserTimings.timestampEvents;\n    const consoleTimings = this.#traceParsedData.UserTimings.consoleTimings;\n\n    if (allMarkerEvents.length === 0 && performanceMarks.length === 0 && performanceMeasures.length === 0 &&\n        timestampEvents.length === 0 && consoleTimings.length === 0) {\n      return trackStartLevel;\n    }\n    this.#appendTrackHeaderAtLevel(trackStartLevel, expanded);\n    let newLevel = this.#appendMarkersAtLevel(trackStartLevel);\n    newLevel = this.#compatibilityBuilder.appendEventsAtLevel(performanceMarks, newLevel, this);\n    newLevel = this.#compatibilityBuilder.appendEventsAtLevel(performanceMeasures, newLevel, this);\n    newLevel = this.#compatibilityBuilder.appendEventsAtLevel(timestampEvents, newLevel, this);\n    return this.#compatibilityBuilder.appendEventsAtLevel(consoleTimings, newLevel, this);\n  }\n\n  /**\n   * Adds into the flame chart data the header corresponding to the\n   * timings track. A header is added in the shape of a group in the\n   * flame chart data. A group has a predefined style and a reference\n   * to the definition of the legacy track (which should be removed\n   * in the future).\n   * @param currentLevel the flame chart level at which the header is\n   * appended.\n   */\n  #appendTrackHeaderAtLevel(currentLevel: number, expanded?: boolean): void {\n    const trackIsCollapsible = this.#traceParsedData.UserTimings.performanceMeasures.length > 0;\n    const style =\n        buildGroupStyle({shareHeaderLine: true, useFirstLineForOverview: true, collapsible: trackIsCollapsible});\n    const group =\n        buildTrackHeader(currentLevel, i18nString(UIStrings.timings), style, /* selectable= */ true, expanded);\n    this.#compatibilityBuilder.registerTrackForGroup(group, this);\n  }\n\n  /**\n   * Adds into the flame chart data the trace events corresponding\n   * to page load markers (LCP, FCP, L, etc.). These are taken straight\n   * from the PageLoadMetrics handler.\n   * @param currentLevel the flame chart level from which markers will\n   * be appended.\n   * @returns the next level after the last occupied by the appended\n   * page load markers (the first available level to append more data).\n   */\n  #appendMarkersAtLevel(currentLevel: number): number {\n    const markers = this.#traceParsedData.PageLoadMetrics.allMarkerEvents;\n    markers.forEach(marker => {\n      const index = this.#compatibilityBuilder.appendEventAtLevel(marker, currentLevel, this);\n      this.#flameChartData.entryTotalTimes[index] = Number.NaN;\n    });\n\n    const minTimeMs = TraceEngine.Helpers.Timing.microSecondsToMilliseconds(this.#traceParsedData.Meta.traceBounds.min);\n    const flameChartMarkers = markers.map(marker => {\n      const startTimeMs = TraceEngine.Helpers.Timing.microSecondsToMilliseconds(marker.ts);\n      return new TimelineFlameChartMarker(startTimeMs, startTimeMs - minTimeMs, this.markerStyleForEvent(marker));\n    });\n    this.#flameChartData.markers.push(...flameChartMarkers);\n    return ++currentLevel;\n  }\n\n  /*\n    ------------------------------------------------------------------------------------\n     The following methods  are invoked by the flame chart renderer to query features about\n     events on rendering.\n    ------------------------------------------------------------------------------------\n  */\n\n  /**\n   * Gets the style for a page load marker event.\n   */\n  markerStyleForEvent(markerEvent: TraceEngine.Types.TraceEvents.PageLoadEvent): TimelineMarkerStyle {\n    const tallMarkerDashStyle = [6, 4];\n    let title = '';\n    let color = 'grey';\n    if (TraceEngine.Types.TraceEvents.isTraceEventMarkDOMContent(markerEvent)) {\n      color = '#0867CB';\n      title = TraceEngine.Handlers.ModelHandlers.PageLoadMetrics.MetricName.DCL;\n    }\n    if (TraceEngine.Types.TraceEvents.isTraceEventMarkLoad(markerEvent)) {\n      color = '#B31412';\n      title = TraceEngine.Handlers.ModelHandlers.PageLoadMetrics.MetricName.L;\n    }\n    if (TraceEngine.Types.TraceEvents.isTraceEventFirstPaint(markerEvent)) {\n      color = '#228847';\n      title = TraceEngine.Handlers.ModelHandlers.PageLoadMetrics.MetricName.FP;\n    }\n    if (TraceEngine.Types.TraceEvents.isTraceEventFirstContentfulPaint(markerEvent)) {\n      color = '#1A6937';\n      title = TraceEngine.Handlers.ModelHandlers.PageLoadMetrics.MetricName.FCP;\n    }\n    if (TraceEngine.Types.TraceEvents.isTraceEventLargestContentfulPaintCandidate(markerEvent)) {\n      color = '#1A3422';\n      title = TraceEngine.Handlers.ModelHandlers.PageLoadMetrics.MetricName.LCP;\n    }\n    return {\n      title: title,\n      dashStyle: tallMarkerDashStyle,\n      lineWidth: 0.5,\n      color: color,\n      tall: true,\n      lowPriority: false,\n    };\n  }\n\n  /**\n   * Gets the color an event added by this appender should be rendered with.\n   */\n  colorForEvent(event: TraceEngine.Types.TraceEvents.TraceEventData): string {\n    if (TraceEngine.Handlers.ModelHandlers.PageLoadMetrics.eventIsPageLoadEvent(event)) {\n      return this.markerStyleForEvent(event).color;\n    }\n    // Performance and console timings.\n    return this.#colorGenerator.colorForID(event.name);\n  }\n\n  /**\n   * Gets the title an event added by this appender should be rendered with.\n   */\n  titleForEvent(event: TraceEngine.Types.TraceEvents.TraceEventData): string {\n    const metricsHandler = TraceEngine.Handlers.ModelHandlers.PageLoadMetrics;\n    if (metricsHandler.eventIsPageLoadEvent(event)) {\n      switch (event.name) {\n        case 'MarkDOMContent':\n          return metricsHandler.MetricName.DCL;\n        case 'MarkLoad':\n          return metricsHandler.MetricName.L;\n        case 'firstContentfulPaint':\n          return metricsHandler.MetricName.FCP;\n        case 'firstPaint':\n          return metricsHandler.MetricName.FP;\n        case 'largestContentfulPaint::Candidate':\n          return metricsHandler.MetricName.LCP;\n        default:\n          return event.name;\n      }\n    }\n    if (TraceEngine.Types.TraceEvents.isTraceEventTimeStamp(event)) {\n      return `${event.name}: ${event.args.data.message}`;\n    }\n    if (TraceEngine.Types.TraceEvents.isTraceEventPerformanceMark(event)) {\n      return `[mark]: ${event.name}`;\n    }\n    return event.name;\n  }\n\n  /**\n   * Returns the info shown when an event added by this appender\n   * is hovered in the timeline.\n   */\n  highlightedEntryInfo(event: TraceEngine.Types.TraceEvents.TraceEventData): HighlightedEntryInfo {\n    const title = this.titleForEvent(event);\n\n    // If an event is a marker event, rather than show a duration of 0, we can instead show the time that the event happened, which is much more useful. We do this currently for:\n    // Page load events: DCL, FCP and LCP\n    // performance.mark() events\n    // console.timestamp() events\n    if (TraceEngine.Handlers.ModelHandlers.PageLoadMetrics.isTraceEventMarkerEvent(event) ||\n        TraceEngine.Types.TraceEvents.isTraceEventPerformanceMark(event) ||\n        TraceEngine.Types.TraceEvents.isTraceEventTimeStamp(event)) {\n      const timeOfEvent = TraceEngine.Helpers.Timing.timeStampForEventAdjustedByClosestNavigation(\n          event,\n          this.#traceParsedData.Meta.traceBounds,\n          this.#traceParsedData.Meta.navigationsByNavigationId,\n          this.#traceParsedData.Meta.navigationsByFrameId,\n      );\n      return {title, formattedTime: getFormattedTime(timeOfEvent)};\n    }\n\n    return {title, formattedTime: getFormattedTime(event.dur)};\n  }\n}\n"]}