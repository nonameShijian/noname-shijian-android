{"version":3,"file":"TimelineJSProfile.js","sourceRoot":"","sources":["../../../../../../front_end/models/timeline_model/TimelineJSProfile.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2014 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as SDK from '../../core/sdk/sdk.js';\nimport type * as Protocol from '../../generated/protocol.js';\nimport * as TraceEngine from '../trace/trace.js';\n\nimport {RecordType, TimelineModelImpl} from './TimelineModel.js';\n\nconst UIStrings = {\n  /**\n   *@description Text for the name of a thread of the page\n   *@example {1} PH1\n   */\n  threadS: 'Thread {PH1}',\n};\nconst str_ = i18n.i18n.registerUIStrings('models/timeline_model/TimelineJSProfile.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\nexport class TimelineJSProfileProcessor {\n  /**\n   * Creates a synthetic instant trace event for each sample in a\n   * profile.\n   * Each sample contains its stack trace under its args.data property.\n   * The stack trace is extracted from a CPUProfileModel instance\n   * which contains the call hierarchy.\n   */\n  static generateConstructedEventsFromCpuProfileDataModel(\n      jsProfileModel: SDK.CPUProfileDataModel.CPUProfileDataModel,\n      thread: SDK.TracingModel.Thread): SDK.TracingModel.Event[] {\n    const samples = jsProfileModel.samples || [];\n    const timestamps = jsProfileModel.timestamps;\n    const jsEvents = [];\n    const nodeToStackMap = new Map<SDK.ProfileTreeModel.ProfileNode|null, Protocol.Runtime.CallFrame[]>();\n\n    let prevNode: SDK.ProfileTreeModel.ProfileNode = jsProfileModel.root;\n    let prevCallFrames: Protocol.Runtime.CallFrame[] = [];\n    // Adds call stacks to fake trace events using the tree in CPUProfileDataModel\n    for (let i = 0; i < samples.length; ++i) {\n      const node: SDK.ProfileTreeModel.ProfileNode|null = jsProfileModel.nodeByIndex(i);\n      if (!node) {\n        console.error(`Node with unknown id ${samples[i]} at index ${i}`);\n        continue;\n      }\n      let callFrames;\n      if (node === jsProfileModel.gcNode) {\n        if (prevNode === jsProfileModel.gcNode) {\n          // If the last recorded sample is also GC sample, we just use the same call frames.\n          callFrames = prevCallFrames;\n        } else {\n          // GC samples have no stack, so we just put GC node on top of the last recorded sample.\n          callFrames = [(node as Protocol.Runtime.CallFrame), ...prevCallFrames];\n        }\n      } else {\n        // For non Garbage Collection nodes, we just use its own call frames.\n        callFrames = nodeToStackMap.get(node);\n        if (!callFrames) {\n          callFrames = new Array(node.depth + 1) as Protocol.Runtime.CallFrame[];\n          nodeToStackMap.set(node, callFrames);\n          let currentNode = node;\n          for (let j = 0; currentNode.parent; currentNode = currentNode.parent) {\n            callFrames[j++] = (currentNode as Protocol.Runtime.CallFrame);\n          }\n        }\n      }\n\n      const name = node === jsProfileModel.idleNode                             ? RecordType.JSIdleSample :\n          node === jsProfileModel.programNode || node === jsProfileModel.gcNode ? RecordType.JSSystemSample :\n                                                                                  RecordType.JSSample;\n\n      const jsSampleEvent = new SDK.TracingModel.ConstructedEvent(\n          SDK.TracingModel.DevToolsTimelineEventCategory, name, TraceEngine.Types.TraceEvents.Phase.INSTANT,\n          timestamps[i], thread);\n      jsSampleEvent.args['data'] = {stackTrace: callFrames};\n      jsEvents.push(jsSampleEvent);\n\n      prevNode = node;\n      prevCallFrames = callFrames;\n    }\n    return jsEvents;\n  }\n\n  static isJSSampleEvent(e: SDK.TracingModel.Event): boolean {\n    return e.name === RecordType.JSSample || e.name === RecordType.JSSystemSample || e.name === RecordType.JSIdleSample;\n  }\n\n  /**\n   * Creates the full call hierarchy, with durations, composed of trace\n   * events and JavaScript function calls.\n   *\n   * Because JavaScript profiles come in the shape of samples with no\n   * duration, JS function call durations are deduced using the timings\n   * of subsequent equal samples and surrounding trace events.\n   *\n   * @param events merged ordered array of trace events and synthetic\n   * \"instant\" events representing samples.\n   * @param config flags to customize the shown events.\n   * @returns the input event array with the new synthetic events\n   * representing call frames.\n   */\n  static generateJSFrameEvents(events: SDK.TracingModel.Event[], config: {\n    showAllEvents: boolean,\n    showRuntimeCallStats: boolean,\n    showNativeFunctions: boolean,\n  }): SDK.TracingModel.Event[] {\n    function equalFrames(frame1: Protocol.Runtime.CallFrame, frame2: Protocol.Runtime.CallFrame): boolean {\n      return frame1.scriptId === frame2.scriptId && frame1.functionName === frame2.functionName &&\n          frame1.lineNumber === frame2.lineNumber;\n    }\n\n    function isJSInvocationEvent(e: SDK.TracingModel.Event): boolean {\n      switch (e.name) {\n        case RecordType.RunMicrotasks:\n        case RecordType.FunctionCall:\n        case RecordType.EvaluateScript:\n        case RecordType.EvaluateModule:\n        case RecordType.EventDispatch:\n        case RecordType.V8Execute:\n          return true;\n      }\n      // Also consider any new v8 trace events. (eg 'V8.RunMicrotasks' and 'v8.run')\n      if (e.name.startsWith('v8') || e.name.startsWith('V8')) {\n        return true;\n      }\n      return false;\n    }\n\n    const jsFrameEvents: SDK.TracingModel.Event[] = [];\n    const jsFramesStack: SDK.TracingModel.Event[] = [];\n    const lockedJsStackDepth: number[] = [];\n    let ordinal = 0;\n    /**\n     * `isJSInvocationEvent()` relies on an allowlist of invocation events that will parent JSFrames.\n     * However in some situations (workers), we don't have those trace events.\n     * \"fake\" JSInvocations are created when we have active JSSamples but seemingly no explicit invocation.\n     */\n    let fakeJSInvocation = false;\n    const {showAllEvents, showRuntimeCallStats, showNativeFunctions} = config;\n\n    /**\n     * JSSamples are instant events, so any start events are not the samples.\n     * We expect they'll either be trace events happening within JS (eg forced layout),\n     * or, in the fakeJSInvocation case, the JS finished and we're seeing the subsequent event.\n     */\n    function onStartEvent(e: SDK.TracingModel.CompatibleTraceEvent): void {\n      if (SDK.TracingModel.eventIsFromNewEngine(e)) {\n        // TODO(crbug.com/1431175) support CPU profiles in new engine.\n        return;\n      }\n      if (fakeJSInvocation) {\n        truncateJSStack((lockedJsStackDepth.pop() as number), e.startTime);\n        fakeJSInvocation = false;\n      }\n      e.ordinal = ++ordinal;\n      extractStackTrace(e);\n      // For the duration of the event we cannot go beyond the stack associated with it.\n      lockedJsStackDepth.push(jsFramesStack.length);\n    }\n\n    function onInstantEvent(\n        e: SDK.TracingModel.CompatibleTraceEvent, parent: SDK.TracingModel.CompatibleTraceEvent|null): void {\n      if (SDK.TracingModel.eventIsFromNewEngine(e) || SDK.TracingModel.eventIsFromNewEngine(parent)) {\n        // TODO(crbug.com/1431175) support CPU profiles in new engine.\n        return;\n      }\n      e.ordinal = ++ordinal;\n      if ((parent && isJSInvocationEvent(parent)) || fakeJSInvocation) {\n        extractStackTrace(e);\n      } else if (\n          TimelineJSProfileProcessor.isJSSampleEvent(e) && e.args?.data?.stackTrace?.length &&\n          jsFramesStack.length === 0) {\n        // Force JS Samples to show up even if we are not inside a JS invocation event, because we\n        // can be missing the start of JS invocation events if we start tracing half-way through.\n        // Pretend we have a top-level JS invocation event.\n        fakeJSInvocation = true;\n        const stackDepthBefore = jsFramesStack.length;\n        extractStackTrace(e);\n        lockedJsStackDepth.push(stackDepthBefore);\n      }\n    }\n\n    function onEndEvent(e: SDK.TracingModel.CompatibleTraceEvent): void {\n      if (SDK.TracingModel.eventIsFromNewEngine(e)) {\n        // TODO(crbug.com/1431175) support CPU profiles in new engine.\n        return;\n      }\n      truncateJSStack((lockedJsStackDepth.pop() as number), (e.endTime as number));\n    }\n\n    /**\n     * When a call stack that differs from the one we are tracking has\n     * been detected in the samples, the latter is \"truncated\" by\n     * setting the ending time of its call frames and removing the top\n     * call frames that aren't shared with the new call stack. This way,\n     * we can update the tracked stack with the new call frames on top.\n     * @param depth the amount of call frames from bottom to top that\n     * should be kept in the tracking stack trace. AKA amount of shared\n     * call frames between two stacks.\n     * @param time the new end of the call frames in the stack.\n     */\n    function truncateJSStack(depth: number, time: number): void {\n      if (lockedJsStackDepth.length) {\n        const lockedDepth = lockedJsStackDepth.at(-1);\n        if (lockedDepth && depth < lockedDepth) {\n          console.error(`Child stack is shallower (${depth}) than the parent stack (${lockedDepth}) at ${time}`);\n          depth = lockedDepth;\n        }\n      }\n      if (jsFramesStack.length < depth) {\n        console.error(`Trying to truncate higher than the current stack size at ${time}`);\n        depth = jsFramesStack.length;\n      }\n      for (let k = 0; k < jsFramesStack.length; ++k) {\n        jsFramesStack[k].setEndTime(time);\n      }\n      jsFramesStack.length = depth;\n    }\n\n    function showNativeName(name: string): boolean {\n      return showRuntimeCallStats && Boolean(TimelineJSProfileProcessor.nativeGroup(name));\n    }\n\n    function filterStackFrames(stack: Protocol.Runtime.CallFrame[]): void {\n      if (showAllEvents) {\n        return;\n      }\n      let previousNativeFrameName: (string|null)|null = null;\n      let j = 0;\n      for (let i = 0; i < stack.length; ++i) {\n        const frame = stack[i];\n        const url = frame.url;\n        const isNativeFrame = url && url.startsWith('native ');\n        if (!showNativeFunctions && isNativeFrame) {\n          continue;\n        }\n        const isNativeRuntimeFrame = TimelineJSProfileProcessor.isNativeRuntimeFrame(frame);\n        if (isNativeRuntimeFrame && !showNativeName(frame.functionName)) {\n          continue;\n        }\n        const nativeFrameName =\n            isNativeRuntimeFrame ? TimelineJSProfileProcessor.nativeGroup(frame.functionName) : null;\n        if (previousNativeFrameName && previousNativeFrameName === nativeFrameName) {\n          continue;\n        }\n        previousNativeFrameName = nativeFrameName;\n        stack[j++] = frame;\n      }\n      stack.length = j;\n    }\n\n    /**\n     * Update tracked stack using this event's call stack.\n     */\n    function extractStackTrace(e: SDK.TracingModel.Event): void {\n      const callFrames: Protocol.Runtime.CallFrame[] = TimelineJSProfileProcessor.isJSSampleEvent(e) ?\n          e.args['data']['stackTrace'].slice().reverse() :\n          jsFramesStack.map(frameEvent => frameEvent.args['data']);\n      filterStackFrames(callFrames);\n      const endTime = e.endTime || e.startTime;\n      const minFrames = Math.min(callFrames.length, jsFramesStack.length);\n      let i;\n\n      // Merge a sample's stack frames with the stack frames we have\n      // so far if we detect they are equivalent.\n      // Graphically\n      // This:\n      // Current stack trace       Sample\n      // [-------A------]          [A]\n      // [-------B------]          [B]\n      // [-------C------]          [C]\n      //                ^ t = x1    ^ t = x2\n\n      // Becomes this:\n      // New stack trace after merge\n      // [--------A-------]\n      // [--------B-------]\n      // [--------C-------]\n      //                  ^ t = x2\n      for (i = lockedJsStackDepth.at(-1) || 0; i < minFrames; ++i) {\n        const newFrame = callFrames[i];\n        const oldFrame = jsFramesStack[i].args['data'];\n        if (!equalFrames(newFrame, oldFrame)) {\n          break;\n        }\n        // Scoot the right edge of this callFrame to the right\n        jsFramesStack[i].setEndTime(Math.max((jsFramesStack[i].endTime as number), endTime));\n      }\n\n      // If there are call frames in the sample that differ with the stack\n      // we have, update the stack, but keeping the common frames in place\n      // Graphically\n      // This:\n      // Current stack trace       Sample\n      // [-------A------]          [A]\n      // [-------B------]          [B]\n      // [-------C------]          [C]\n      // [-------D------]          [E]\n      //                ^ t = x1    ^ t = x2\n      // Becomes this:\n      // New stack trace after merge\n      // [--------A-------]\n      // [--------B-------]\n      // [--------C-------]\n      //                [E]\n      //                  ^ t = x2\n      truncateJSStack(i, e.startTime);\n      for (; i < callFrames.length; ++i) {\n        const frame = callFrames[i];\n        let jsFrameType = RecordType.JSFrame;\n        switch (e.name) {\n          case RecordType.JSIdleSample:\n            jsFrameType = RecordType.JSIdleFrame;\n            break;\n          case RecordType.JSSystemSample:\n            jsFrameType = RecordType.JSSystemFrame;\n            break;\n        }\n        const jsFrameEvent = new SDK.TracingModel.ConstructedEvent(\n            SDK.TracingModel.DevToolsTimelineEventCategory, jsFrameType, TraceEngine.Types.TraceEvents.Phase.COMPLETE,\n            e.startTime, e.thread);\n        jsFrameEvent.ordinal = e.ordinal;\n        jsFrameEvent.addArgs({data: frame});\n        jsFrameEvent.setEndTime(endTime);\n        jsFramesStack.push(jsFrameEvent);\n        jsFrameEvents.push(jsFrameEvent);\n      }\n    }\n\n    const firstTopLevelEvent = events.find(SDK.TracingModel.TracingModel.isTopLevelEvent);\n    const startTime = firstTopLevelEvent ? firstTopLevelEvent.startTime : 0;\n    TimelineModelImpl.forEachEvent(events, onStartEvent, onEndEvent, onInstantEvent, startTime);\n    return jsFrameEvents;\n  }\n\n  static isNativeRuntimeFrame(frame: Protocol.Runtime.CallFrame): boolean {\n    return frame.url === 'native V8Runtime';\n  }\n\n  static nativeGroup(nativeName: string): string|null {\n    if (nativeName.startsWith('Parse')) {\n      return TimelineJSProfileProcessor.NativeGroups.Parse;\n    }\n    if (nativeName.startsWith('Compile') || nativeName.startsWith('Recompile')) {\n      return TimelineJSProfileProcessor.NativeGroups.Compile;\n    }\n    return null;\n  }\n\n  static createFakeTraceFromCpuProfile(profile: any, tid: number, injectPageEvent: boolean, name?: string|null):\n      SDK.TracingManager.EventPayload[] {\n    const events: SDK.TracingManager.EventPayload[] = [];\n\n    if (injectPageEvent) {\n      appendEvent('TracingStartedInPage', {data: {'sessionId': '1'}}, 0, 0, 'M');\n    }\n    if (!name) {\n      name = i18nString(UIStrings.threadS, {PH1: tid});\n    }\n    appendEvent(SDK.TracingModel.MetadataEvent.ThreadName, {name}, 0, 0, 'M', '__metadata');\n    if (!profile) {\n      return events;\n    }\n\n    // Append a root to show the start time of the profile (which is earlier than first sample), so the Performance\n    // panel won't truncate this time period.\n    appendEvent(RecordType.JSRoot, {}, profile.startTime, profile.endTime - profile.startTime, 'X', 'toplevel');\n    // TODO: create a `Profile` event instead, as `cpuProfile` is legacy\n    appendEvent('CpuProfile', {data: {'cpuProfile': profile}}, profile.endTime, 0, 'I');\n    return events;\n\n    function appendEvent(\n        name: string, args: any, ts: number, dur?: number, ph?: string, cat?: string): SDK.TracingManager.EventPayload {\n      const event =\n          ({cat: cat || 'disabled-by-default-devtools.timeline', name, ph: ph || 'X', pid: 1, tid, ts, args} as\n           SDK.TracingManager.EventPayload);\n      if (dur) {\n        event.dur = dur;\n      }\n      events.push(event);\n      return event;\n    }\n  }\n}\n\nexport namespace TimelineJSProfileProcessor {\n  // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration)\n  // eslint-disable-next-line rulesdir/const_enum\n  export enum NativeGroups {\n    Compile = 'Compile',\n    Parse = 'Parse',\n  }\n}\n"]}