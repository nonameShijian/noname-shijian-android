{"version":3,"file":"basic.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/components/docs/performance_panel/basic.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as FrontendHelpers from '../../../../../test/unittests/front_end/helpers/EnvironmentHelpers.js';\nimport * as Common from '../../../../core/common/common.js';\nimport * as SDK from '../../../../core/sdk/sdk.js';\nimport * as Bindings from '../../../../models/bindings/bindings.js';\nimport * as Workspace from '../../../../models/workspace/workspace.js';\nimport * as Timeline from '../../../../panels/timeline/timeline.js';\nimport * as UI from '../../../legacy/legacy.js';\nimport * as ComponentSetup from '../../helpers/helpers.js';\n\n/**\n * Because the panel is not quite as isolated as other components we have to\n * do a bit of setup globally to ensure the panel can render, primarily creating\n * some actions and settings. We also have to instantiate some instances which\n * would usually be setup in MainImpl when running DevTools, but we can set them\n * up here rather than pull in all of the setup from elsewhere. Over time we\n * should look to reduce this global setup and pass data into the panel.\n **/\nawait FrontendHelpers.initializeGlobalVars();\nawait ComponentSetup.ComponentServerSetup.setup();\n\nconst resourceMapping = new Bindings.ResourceMapping.ResourceMapping(\n    SDK.TargetManager.TargetManager.instance(),\n    Workspace.Workspace.WorkspaceImpl.instance(),\n);\nBindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance({\n  forceNew: true,\n  resourceMapping,\n  targetManager: SDK.TargetManager.TargetManager.instance(),\n});\nBindings.IgnoreListManager.IgnoreListManager.instance({\n  forceNew: true,\n  debuggerWorkspaceBinding: Bindings.DebuggerWorkspaceBinding.DebuggerWorkspaceBinding.instance(),\n});\nSDK.CPUThrottlingManager.CPUThrottlingManager.instance().setHardwareConcurrency(128);\n\nUI.ActionRegistration.registerActionExtension({\n  actionId: 'timeline.record-reload',\n  iconClass: UI.ActionRegistration.IconClass.REFRESH,\n  category: UI.ActionRegistration.ActionCategory.PERFORMANCE,\n  contextTypes() {\n    return [Timeline.TimelinePanel.TimelinePanel];\n  },\n  bindings: [\n    {\n      platform: UI.ActionRegistration.Platforms.WindowsLinux,\n      shortcut: 'Ctrl+Shift+E',\n    },\n    {\n      platform: UI.ActionRegistration.Platforms.Mac,\n      shortcut: 'Meta+Shift+E',\n    },\n  ],\n});\nUI.ActionRegistration.registerActionExtension({\n  actionId: 'timeline.show-history',\n  category: UI.ActionRegistration.ActionCategory.PERFORMANCE,\n  contextTypes() {\n    return [Timeline.TimelinePanel.TimelinePanel];\n  },\n});\nUI.ActionRegistration.registerActionExtension({\n  actionId: 'components.collect-garbage',\n  category: UI.ActionRegistration.ActionCategory.PERFORMANCE,\n});\nUI.ActionRegistration.registerActionExtension({\n  actionId: 'timeline.toggle-recording',\n  title: () => 'Toggle recording' as Common.UIString.LocalizedString,\n  toggleable: true,\n  category: UI.ActionRegistration.ActionCategory.PERFORMANCE,\n  iconClass: UI.ActionRegistration.IconClass.START_RECORDING,\n  contextTypes() {\n    return [Timeline.TimelinePanel.TimelinePanel];\n  },\n  bindings: [\n    {\n      platform: UI.ActionRegistration.Platforms.WindowsLinux,\n      shortcut: 'Ctrl+E',\n    },\n    {\n      platform: UI.ActionRegistration.Platforms.Mac,\n      shortcut: 'Meta+E',\n    },\n  ],\n});\nconst actionRegistry = UI.ActionRegistry.ActionRegistry.instance();\nUI.ShortcutRegistry.ShortcutRegistry.instance({forceNew: true, actionRegistry: actionRegistry});\nCommon.Settings.settingForTest('flamechartMouseWheelAction').set('zoom');\n\nconst params = new URLSearchParams(window.location.search);\nconst traceFileName = params.get('trace');\nconst cpuprofileName = params.get('cpuprofile');\nconst nodeMode = params.get('isNode');\nconst isNodeMode = nodeMode === 'true' ? true : false;\n\nconst timeline = Timeline.TimelinePanel.TimelinePanel.instance({forceNew: true, isNode: isNodeMode});\nconst container = document.getElementById('container');\nif (!container) {\n  throw new Error('could not find container');\n}\ncontainer.innerHTML = '';\ntimeline.markAsRoot();\ntimeline.show(container);\n\nlet fileName;\nif (traceFileName) {\n  fileName = `${traceFileName}.json.gz`;\n} else if (cpuprofileName) {\n  fileName = `${cpuprofileName}.cpuprofile.gz`;\n}\n\nif (fileName) {\n  const file = new URL(`../../../../../test/unittests/fixtures/traces/${fileName}`, import.meta.url);\n  const response = await fetch(file);\n  const asBlob = await response.blob();\n  const asFile = new File([asBlob], `${fileName}`, {\n    type: 'application/gzip',\n  });\n  void timeline.loadFromFile(asFile);\n}\n"]}