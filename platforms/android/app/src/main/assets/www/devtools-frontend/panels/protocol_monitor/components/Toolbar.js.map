{"version":3,"file":"Toolbar.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/protocol_monitor/components/Toolbar.ts"],"names":[],"mappings":";;;;;;AAAA,4DAA4D;AAC5D,yEAAyE;AACzE,6BAA6B;AAC7B,OAAO,yCAAyC,CAAC;AAEjD,OAAO,KAAK,OAAO,MAAM,2CAA2C,CAAC;AACrE,OAAO,KAAK,OAAO,MAAM,kCAAkC,CAAC;AAE5D,OAAO,kBAAkB,MAAM,qBAAqB,CAAC;AACrD,OAAO,aAAa,MAAM,kBAAkB,CAAC;AAE7C,MAAM,EAAC,IAAI,EAAE,UAAU,EAAE,UAAU,EAAC,GAAG,OAAO,CAAC;AAC/C,MAAM,EAAC,aAAa,EAAC,GAAG,UAAU,CAAC;AAQnC,MAAM,WAAW,GAAG,IAAI,GAAG,CAAC,0BAA0B,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;AACpF,MAAM,WAAW,GAAG,IAAI,GAAG,CAAC,0BAA0B,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;AAG7E,WAAM,OAAO,GAAb,MAAM,OAAQ,SAAQ,UAAU;IACrC,MAAM,CAAU,MAAM,GAAG,CAAC,aAAa,EAAE,kBAAkB,CAAC,CAAC;IAE7D,WAAW,GAAG,GAAS,EAAE;QACvB,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,aAAa,EAAE,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;IACtE,CAAC,CAAC;IAEF,WAAW,GAAG,GAAS,EAAE;QACvB,IAAI,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,aAAa,EAAE,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;IACtE,CAAC,CAAC;IAEO,MAAM;QACb,mBAAmB;QACnB,OAAO,IAAI,CAAA;;aAEF,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU;kBAC3B,yCAA0B;qBACvB,WAAW;qBACX,8CAA8B;mBAChC,IAAI,CAAC,WAAW;aACtB,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU;WAClC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU;kBACzB,uCAAyB;qBACtB,WAAW;qBACX,8DAAsC;mBACxC,IAAI,CAAC,WAAW;aACtB,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU;;KAExC,CAAC;QACF,kBAAkB;IACpB,CAAC;;AA9BU,OAAO;IADnB,aAAa,CAAC,qBAAqB,CAAC;GACxB,OAAO,CA+BnB","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport '../../recorder/components/components.js';\n\nimport * as Buttons from '../../../ui/components/buttons/buttons.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\n\nimport editorWidgetStyles from './JSONEditor.css.js';\nimport toolbarStyles from './toolbar.css.js';\n\nconst {html, Decorators, LitElement} = LitHtml;\nconst {customElement} = Decorators;\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-pm-toolbar': Toolbar;\n  }\n}\n\nconst copyIconUrl = new URL('../../../Images/copy.svg', import.meta.url).toString();\nconst sendIconUrl = new URL('../../../Images/send.svg', import.meta.url).toString();\n\n@customElement('devtools-pm-toolbar')\nexport class Toolbar extends LitElement {\n  static override styles = [toolbarStyles, editorWidgetStyles];\n\n  #handleCopy = (): void => {\n    this.dispatchEvent(new CustomEvent('copycommand', {bubbles: true}));\n  };\n\n  #handleSend = (): void => {\n    this.dispatchEvent(new CustomEvent('commandsent', {bubbles: true}));\n  };\n\n  override render(): LitHtml.TemplateResult {\n    // clang-format off\n    return html`\n        <div class=\"toolbar\">\n          <${Buttons.Button.Button.litTagName}\n          .size=${Buttons.Button.Size.MEDIUM}\n          .iconUrl=${copyIconUrl}\n          .variant=${Buttons.Button.Variant.TOOLBAR}\n          @click=${this.#handleCopy}\n        ></${Buttons.Button.Button.litTagName}>\n        <${Buttons.Button.Button.litTagName}\n          .size=${Buttons.Button.Size.SMALL}\n          .iconUrl=${sendIconUrl}\n          .variant=${Buttons.Button.Variant.PRIMARY_TOOLBAR}\n          @click=${this.#handleSend}\n        ></${Buttons.Button.Button.litTagName}>\n      </div>\n    `;\n    // clang-format on\n  }\n}\n"]}