{"version":3,"file":"EditableSpan.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/network/components/EditableSpan.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as ComponentHelpers from '../../../ui/components/helpers/helpers.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\n\nimport editableSpanStyles from './EditableSpan.css.js';\n\nconst {render, html} = LitHtml;\n\nexport interface EditableSpanData {\n  value: string;\n}\n\nexport class EditableSpan extends HTMLElement {\n  static readonly litTagName = LitHtml.literal`devtools-editable-span`;\n  readonly #shadow = this.attachShadow({mode: 'open'});\n  readonly #boundRender = this.#render.bind(this);\n  #value: string = '';\n\n  connectedCallback(): void {\n    this.#shadow.adoptedStyleSheets = [editableSpanStyles];\n    this.#shadow.addEventListener('focusin', this.#selectAllText.bind(this));\n    this.#shadow.addEventListener('keydown', this.#onKeyDown.bind(this));\n    this.#shadow.addEventListener('paste', this.#onPaste.bind(this));\n    this.#shadow.addEventListener('input', this.#onInput.bind(this));\n  }\n\n  set data(data: EditableSpanData) {\n    this.#value = data.value;\n    void ComponentHelpers.ScheduledRender.scheduleRender(this, this.#boundRender);\n  }\n\n  get value(): string {\n    return this.#shadow.querySelector<HTMLSpanElement>('span')?.innerText || '';\n  }\n\n  set value(value: string) {\n    this.#value = value;\n    const span = this.#shadow.querySelector<HTMLSpanElement>('span');\n    if (span) {\n      span.innerText = value;\n    }\n  }\n\n  #onKeyDown(event: Event): void {\n    if ((event as KeyboardEvent).key === 'Enter') {\n      event.preventDefault();\n      (event.target as HTMLElement)?.blur();\n    }\n  }\n\n  #onInput(event: Event): void {\n    this.#value = (event.target as HTMLElement).innerText;\n  }\n\n  #selectAllText(event: Event): void {\n    const target = event.target as HTMLElement;\n    const selection = window.getSelection();\n    const range = document.createRange();\n    range.selectNodeContents(target);\n    selection?.removeAllRanges();\n    selection?.addRange(range);\n  }\n\n  #onPaste(event: Event): void {\n    const clipboardEvent = event as ClipboardEvent;\n    event.preventDefault();\n    if (clipboardEvent.clipboardData) {\n      const text = clipboardEvent.clipboardData.getData('text/plain');\n      const range = this.#shadow.getSelection()?.getRangeAt(0);\n      if (!range) {\n        return;\n      }\n      range.deleteContents();\n\n      const textNode = document.createTextNode(text);\n      range.insertNode(textNode);\n      range.selectNodeContents(textNode);\n      range.collapse(false);\n\n      const selection = window.getSelection();\n      selection?.removeAllRanges();\n      selection?.addRange(range);\n    }\n  }\n\n  #render(): void {\n    if (!ComponentHelpers.ScheduledRender.isScheduledRender(this)) {\n      throw new Error('HeaderSectionRow render was not scheduled');\n    }\n\n    // Disabled until https://crbug.com/1079231 is fixed.\n    // clang-format off\n    render(html`<span contenteditable=\"true\" class=\"editable\" tabindex=\"0\" .innerText=${this.#value}></span>`, this.#shadow, {host: this});\n    // clang-format on\n  }\n\n  override focus(): void {\n    requestAnimationFrame(() => {\n      const span = this.#shadow.querySelector<HTMLElement>('.editable');\n      span?.focus();\n    });\n  }\n}\n\nComponentHelpers.CustomElements.defineComponent('devtools-editable-span', EditableSpan);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-editable-span': EditableSpan;\n  }\n}\n"]}