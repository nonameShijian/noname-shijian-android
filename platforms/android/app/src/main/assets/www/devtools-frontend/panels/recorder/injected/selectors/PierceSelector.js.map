{"version":3,"file":"PierceSelector.js","sourceRoot":"","sources":["../../../../../../../../front_end/panels/recorder/injected/selectors/PierceSelector.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable rulesdir/es_modules_import */\n\nimport {type Selector} from './Selector.js';\n\nimport {\n  findMinMax,\n  SelectorRangeOps,\n  type RangeOps,\n  type QueryableNode,\n} from './CSSSelector.js';\nimport {\n  pierceQuerySelectorAll,\n} from\n    '../../../../third_party/puppeteer/package/lib/esm/puppeteer/injected/PierceQuerySelector.js';\n\nclass PierceSelectorRangeOpts implements RangeOps<QueryableNode, string[][]> {\n  #selector: string[][] = [[]];\n  #attributes: string[];\n  #depth = 0;\n\n  constructor(attributes: string[] = []) {\n    this.#attributes = attributes;\n  }\n\n  inc(node: Node): Document|ShadowRoot {\n    return node.getRootNode() as Document | ShadowRoot;\n  }\n  self(node: Document|ShadowRoot): QueryableNode {\n    return node instanceof ShadowRoot ? node.host : node;\n  }\n  valueOf(node: QueryableNode): string[][] {\n    const selector = findMinMax(\n        [node, node.getRootNode()],\n        new SelectorRangeOps(this.#attributes),\n    );\n    if (this.#depth > 1) {\n      this.#selector.unshift([selector]);\n    } else {\n      this.#selector[0].unshift(selector);\n    }\n    this.#depth = 0;\n    return this.#selector;\n  }\n  gte(selector: string[][], node: Node): boolean {\n    ++this.#depth;\n    // Note we use some insider logic here. `valueOf(node)` will always\n    // correspond to `selector.flat().slice(1)`, so it suffices to check\n    // uniqueness for `selector.flat()[0]`.\n    return pierceQuerySelectorAll(node, selector[0][0]).length === 1;\n  }\n}\n\n/**\n * Computes the pierce CSS selector for a node.\n *\n * @param node - The node to compute.\n * @returns The computed pierce CSS selector.\n *\n * @internal\n */\nexport const computePierceSelector = (\n    node: Node,\n    attributes?: string[],\n    ): string[]|undefined => {\n  try {\n    const ops = new PierceSelectorRangeOpts(attributes);\n    return findMinMax([node, document], ops).flat();\n  } catch {\n    return undefined;\n  }\n};\n\nexport const queryPierceSelectorAll = (selectors: Selector): Element[] => {\n  if (typeof selectors === 'string') {\n    selectors = [selectors];\n  } else if (selectors.length === 0) {\n    return [];\n  }\n  let lists: Element[][] = [[document.documentElement]];\n  do {\n    const selector = selectors.shift() as string;\n    const roots: Element[][] = [];\n    for (const nodes of lists) {\n      for (const node of nodes) {\n        const list = pierceQuerySelectorAll(node.shadowRoot ?? node, selector);\n        if (list.length > 0) {\n          roots.push(list);\n        }\n      }\n    }\n    lists = roots;\n  } while (selectors.length > 0 && lists.length > 0);\n  return lists.flatMap(list => [...list]);\n};\n"]}