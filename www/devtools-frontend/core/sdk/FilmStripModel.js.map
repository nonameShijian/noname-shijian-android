{"version":3,"file":"FilmStripModel.js","sourceRoot":"","sources":["../../../../../../front_end/core/sdk/FilmStripModel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as TraceEngine from '../../models/trace/trace.js';\nimport * as Platform from '../platform/platform.js';\n\nimport {TracingModel, type ObjectSnapshot} from './TracingModel.js';\n\nexport class FilmStripModel {\n  #framesInternal: Frame[];\n  #zeroTimeInternal: number;\n  #spanTimeInternal: number;\n\n  constructor(tracingModel: TracingModel, zeroTime?: number) {\n    this.#framesInternal = [];\n    this.#zeroTimeInternal = 0;\n    this.#spanTimeInternal = 0;\n\n    this.reset(tracingModel, zeroTime);\n  }\n\n  hasFrames(): boolean {\n    return this.#framesInternal.length > 0;\n  }\n\n  reset(tracingModel: TracingModel, zeroTime?: number): void {\n    this.#zeroTimeInternal = zeroTime || tracingModel.minimumRecordTime();\n    this.#spanTimeInternal = tracingModel.maximumRecordTime() - this.#zeroTimeInternal;\n\n    this.#framesInternal = [];\n    const browserMain = TracingModel.browserMainThread(tracingModel);\n    if (!browserMain) {\n      return;\n    }\n\n    const events = browserMain.events();\n    for (let i = 0; i < events.length; ++i) {\n      const event = events[i];\n      if (event.startTime < this.#zeroTimeInternal) {\n        continue;\n      }\n      if (!event.hasCategory(DEVTOOLS_SCREENSHOT_CATEGORY)) {\n        continue;\n      }\n      if (event.name === TraceEvents.Screenshot) {\n        this.#framesInternal.push(Frame.fromSnapshot(this, (event as ObjectSnapshot), this.#framesInternal.length));\n      }\n    }\n  }\n\n  frames(): Frame[] {\n    return this.#framesInternal;\n  }\n\n  zeroTime(): number {\n    return this.#zeroTimeInternal;\n  }\n\n  spanTime(): number {\n    return this.#spanTimeInternal;\n  }\n\n  frameByTimestamp(searchTimestamp: number): Frame|null {\n    // We want to find the closest frame to the timestamp that happened BEFORE\n    // the timestamp. So to do that we walk from the end of the array of\n    // frames, looking for the first frame where its timestamp is less than the\n    // timestamp we are searching for. It is important we search from the end\n    // of the array of frames, otherwise we will simply return the first frame\n    // that happened before the timestamp, even if it is not the closest one.\n    const closestFrameIndexBeforeTimestamp =\n        Platform.ArrayUtilities.nearestIndexFromEnd(this.#framesInternal, frame => frame.timestamp < searchTimestamp);\n    if (closestFrameIndexBeforeTimestamp === null) {\n      return null;\n    }\n    return this.#framesInternal[closestFrameIndexBeforeTimestamp];\n  }\n}\n\nconst DEVTOOLS_SCREENSHOT_CATEGORY = 'disabled-by-default-devtools.screenshot';\n\nconst TraceEvents = {\n  Screenshot: 'Screenshot',\n};\n\nexport class Frame {\n  readonly #modelInternal: FilmStripModel;\n  timestamp: number;\n  index: number;\n  #snapshot: ObjectSnapshot|null;\n  #traceEvent: TraceEngine.Types.TraceEvents.TraceEventSnapshot|null;\n\n  constructor(model: FilmStripModel, timestamp: number, index: number) {\n    this.#modelInternal = model;\n    this.timestamp = timestamp;\n    this.index = index;\n    this.#traceEvent = null;\n    this.#snapshot = null;\n  }\n\n  static fromSnapshot(model: FilmStripModel, snapshot: ObjectSnapshot, index: number): Frame {\n    const frame = new Frame(model, snapshot.startTime, index);\n    frame.#snapshot = snapshot;\n    return frame;\n  }\n\n  static fromTraceEvent(\n      model: FilmStripModel, snapshot: TraceEngine.Types.TraceEvents.TraceEventSnapshot, index: number): Frame {\n    const startTime = TraceEngine.Helpers.Timing.microSecondsToMilliseconds(snapshot.ts);\n    const frame = new Frame(model, startTime, index);\n    frame.#traceEvent = snapshot;\n    return frame;\n  }\n\n  model(): FilmStripModel {\n    return this.#modelInternal;\n  }\n\n  imageDataPromise(): Promise<string|null> {\n    // TODO(crbug.com/1453234): make this function sync now that all the ways\n    // we store snapshots are sync.\n    if (this.#traceEvent) {\n      return Promise.resolve(this.#traceEvent.args.snapshot);\n    }\n\n    if (!this.#snapshot) {\n      return Promise.resolve(null);\n    }\n\n    return Promise.resolve(this.#snapshot.getSnapshot() as unknown as string);\n  }\n}\n"]}