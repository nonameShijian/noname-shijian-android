{"version":3,"file":"Timing.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/helpers/Timing.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as Types from '../types/types.js';\n\nimport {getNavigationForTraceEvent} from './Trace.js';\n\nexport const millisecondsToMicroseconds = (value: Types.Timing.MilliSeconds): Types.Timing.MicroSeconds =>\n    Types.Timing.MicroSeconds(value * 1000);\n\nexport const secondsToMilliseconds = (value: Types.Timing.Seconds): Types.Timing.MilliSeconds =>\n    Types.Timing.MilliSeconds(value * 1000);\n\nexport const secondsToMicroseconds = (value: Types.Timing.Seconds): Types.Timing.MicroSeconds =>\n    millisecondsToMicroseconds(secondsToMilliseconds(value));\n\nexport const microSecondsToMilliseconds = (value: Types.Timing.MicroSeconds): Types.Timing.MilliSeconds =>\n    Types.Timing.MilliSeconds(value / 1000);\n\nexport function detectBestTimeUnit(timeInMicroseconds: Types.Timing.MicroSeconds): Types.Timing.TimeUnit {\n  if (timeInMicroseconds < 1000) {\n    return Types.Timing.TimeUnit.MICROSECONDS;\n  }\n\n  const timeInMilliseconds = timeInMicroseconds / 1000;\n  if (timeInMilliseconds < 1000) {\n    return Types.Timing.TimeUnit.MILLISECONDS;\n  }\n\n  const timeInSeconds = timeInMilliseconds / 1000;\n  if (timeInSeconds < 60) {\n    return Types.Timing.TimeUnit.SECONDS;\n  }\n\n  return Types.Timing.TimeUnit.MINUTES;\n}\n\ninterface FormatOptions extends Intl.NumberFormatOptions {\n  format?: Types.Timing.TimeUnit;\n}\n\nconst defaultFormatOptions = {\n  style: 'unit',\n  unit: 'millisecond',\n  unitDisplay: 'narrow',\n};\n\n// Create a bunch of common formatters up front, so that we're not creating\n// them repeatedly during rendering.\nconst serialize = (value: {}): string => JSON.stringify(value);\nconst formatterFactory = (key: string|undefined): Intl.NumberFormat => {\n  return new Intl.NumberFormat(navigator.language, key ? JSON.parse(key) : {});\n};\nconst formatters = new Map<string, Intl.NumberFormat>();\n\n// Microsecond Formatter.\nPlatform.MapUtilities.getWithDefault(formatters, serialize({style: 'decimal'}), formatterFactory);\n\n// Millisecond Formatter\nPlatform.MapUtilities.getWithDefault(formatters, serialize(defaultFormatOptions), formatterFactory);\n\n// Second Formatter\nPlatform.MapUtilities.getWithDefault(\n    formatters, serialize({...defaultFormatOptions, unit: 'second'}), formatterFactory);\n\n// Minute Formatter\nPlatform.MapUtilities.getWithDefault(\n    formatters, serialize({...defaultFormatOptions, unit: 'minute'}), formatterFactory);\n\nexport function formatMicrosecondsTime(\n    timeInMicroseconds: Types.Timing.MicroSeconds, opts: FormatOptions = {}): string {\n  if (!opts.format) {\n    opts.format = detectBestTimeUnit(timeInMicroseconds);\n  }\n\n  const timeInMilliseconds = timeInMicroseconds / 1000;\n  const timeInSeconds = timeInMilliseconds / 1000;\n  const formatterOpts = {...defaultFormatOptions, ...opts};\n\n  switch (opts.format) {\n    case Types.Timing.TimeUnit.MICROSECONDS: {\n      const formatter =\n          Platform.MapUtilities.getWithDefault(formatters, serialize({style: 'decimal'}), formatterFactory);\n      return `${formatter.format(timeInMicroseconds)}Î¼s`;\n    }\n\n    case Types.Timing.TimeUnit.MILLISECONDS: {\n      const formatter = Platform.MapUtilities.getWithDefault(formatters, serialize(formatterOpts), formatterFactory);\n      return formatter.format(timeInMilliseconds);\n    }\n\n    case Types.Timing.TimeUnit.SECONDS: {\n      const formatter = Platform.MapUtilities.getWithDefault(\n          formatters, serialize({...formatterOpts, unit: 'second'}), formatterFactory);\n      return formatter.format(timeInSeconds);\n    }\n\n    default: {\n      // Switch to mins & seconds.\n      const minuteFormatter = Platform.MapUtilities.getWithDefault(\n          formatters, serialize({...formatterOpts, unit: 'minute'}), formatterFactory);\n      const secondFormatter = Platform.MapUtilities.getWithDefault(\n          formatters, serialize({...formatterOpts, unit: 'second'}), formatterFactory);\n      const timeInMinutes = timeInSeconds / 60;\n      const [mins, divider, fraction] = minuteFormatter.formatToParts(timeInMinutes);\n\n      let seconds = 0;\n      if (divider && fraction) {\n        // Convert the fraction value (a string) to the nearest second.\n        seconds = Math.round(Number(`0.${fraction.value}`) * 60);\n      }\n      return `${minuteFormatter.format(Number(mins.value))} ${secondFormatter.format(seconds)}`;\n    }\n  }\n}\n\nexport function timeStampForEventAdjustedByClosestNavigation(\n    event: Types.TraceEvents.TraceEventData,\n    traceBounds: Types.Timing.TraceWindow,\n    navigationsByNavigationId: Map<string, Types.TraceEvents.TraceEventNavigationStart>,\n    navigationsByFrameId: Map<string, Types.TraceEvents.TraceEventNavigationStart[]>,\n    ): Types.Timing.MicroSeconds {\n  let eventTimeStamp = event.ts - traceBounds.min;\n  if (event.args?.data?.navigationId) {\n    const navigationForEvent = navigationsByNavigationId.get(event.args.data.navigationId);\n    if (navigationForEvent) {\n      eventTimeStamp = event.ts - navigationForEvent.ts;\n    }\n  } else if (event.args?.data?.frame) {\n    const navigationForEvent = getNavigationForTraceEvent(event, event.args.data.frame, navigationsByFrameId);\n    if (navigationForEvent) {\n      eventTimeStamp = event.ts - navigationForEvent.ts;\n    }\n  }\n  return Types.Timing.MicroSeconds(eventTimeStamp);\n}\n"]}