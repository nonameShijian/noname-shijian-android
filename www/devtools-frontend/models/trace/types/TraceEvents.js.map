{"version":3,"file":"TraceEvents.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/types/TraceEvents.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n/* eslint-disable no-unused-private-class-members */\nimport type * as Protocol from '../../../generated/protocol.js';\nimport {type MicroSeconds, type MilliSeconds, type Seconds} from './Timing.js';\n\n// Trace Events.\nexport const enum Phase {\n  // Standard\n  BEGIN = 'B',\n  END = 'E',\n  COMPLETE = 'X',\n  INSTANT = 'I',\n  COUNTER = 'C',\n\n  // Async\n  ASYNC_NESTABLE_START = 'b',\n  ASYNC_NESTABLE_INSTANT = 'n',\n  ASYNC_NESTABLE_END = 'e',\n  ASYNC_STEP_INTO = 'T',\n  ASYNC_BEGIN = 'S',\n  ASYNC_END = 'F',\n  ASYNC_STEP_PAST = 'p',\n\n  // Flow\n  FLOW_START = 's',\n  FLOW_STEP = 't',\n  FLOW_END = 'f',\n\n  // Sample\n  SAMPLE = 'P',\n\n  // Object\n  OBJECT_CREATED = 'N',\n  OBJECT_SNAPSHOT = 'O',\n  OBJECT_DESTROYED = 'D',\n\n  // Metadata\n  METADATA = 'M',\n\n  // Memory Dump\n  MEMORY_DUMP_GLOBAL = 'V',\n  MEMORY_DUMP_PROCESS = 'v',\n\n  // Mark\n  MARK = 'R',\n\n  // Clock sync\n  CLOCK_SYNC = 'c',\n}\n\nexport function isNestableAsyncPhase(phase: Phase): boolean {\n  return phase === Phase.ASYNC_NESTABLE_START || phase === Phase.ASYNC_NESTABLE_END ||\n      phase === Phase.ASYNC_NESTABLE_INSTANT;\n}\n\nexport function isAsyncPhase(phase: Phase): boolean {\n  return isNestableAsyncPhase(phase) || phase === Phase.ASYNC_BEGIN || phase === Phase.ASYNC_STEP_INTO ||\n      phase === Phase.ASYNC_END || phase === Phase.ASYNC_STEP_PAST;\n}\n\nexport function isFlowPhase(phase: Phase): boolean {\n  return phase === Phase.FLOW_START || phase === Phase.FLOW_STEP || phase === Phase.FLOW_END;\n}\n\nexport const enum TraceEventScope {\n  THREAD = 't',\n  PROCESS = 'p',\n  GLOBAL = 'g',\n}\n\nexport interface TraceEventData {\n  args?: TraceEventArgs;\n  cat: string;\n  name: string;\n  ph: Phase;\n  pid: ProcessID;\n  tid: ThreadID;\n  tts?: MicroSeconds;\n  ts: MicroSeconds;\n  tdur?: MicroSeconds;\n  dur?: MicroSeconds;\n}\n\nexport interface TraceEventArgs {\n  data?: TraceEventArgsData;\n}\n\nexport interface TraceEventArgsData {\n  stackTrace?: TraceEventCallFrame[];\n  navigationId?: string;\n  frame?: string;\n}\n\nexport interface TraceEventCallFrame {\n  codeType?: string;\n  functionName: string;\n  scriptId: number;\n  columnNumber?: number;\n  lineNumber?: number;\n  url?: string;\n}\n\nexport interface TraceFrame {\n  frame: string;\n  name: string;\n  processId: ProcessID;\n  url: string;\n  parent?: string;\n}\n\n// Sample events.\n\nexport interface TraceEventSample extends TraceEventData {\n  ph: Phase.SAMPLE;\n}\n\nexport interface TraceEventProfile extends TraceEventSample {\n  name: 'Profile';\n  id: ProfileID;\n  args: TraceEventArgs&{\n    data: TraceEventArgsData & {\n      startTime: MicroSeconds,\n    },\n  };\n}\n\nexport interface TraceEventProfileChunk extends TraceEventSample {\n  name: 'ProfileChunk';\n  id: ProfileID;\n  args: TraceEventArgs&{\n    // `data` is only missing in \"fake\" traces\n    data?: TraceEventArgsData & {\n      cpuProfile?: TraceEventPartialProfile,\n      timeDeltas?: MicroSeconds[],\n    },\n  };\n}\n\nexport interface TraceEventPartialProfile {\n  nodes?: TraceEventPartialNode[];\n  samples: CallFrameID[];\n}\n\nexport interface TraceEventPartialNode {\n  callFrame: TraceEventCallFrame;\n  id: CallFrameID;\n  parent?: CallFrameID;\n}\n\n// Complete events.\n\nexport interface TraceEventComplete extends TraceEventData {\n  ph: Phase.COMPLETE;\n  dur: MicroSeconds;\n}\n\nexport interface TraceEventDispatch extends TraceEventComplete {\n  name: 'EventDispatch';\n  args: TraceEventArgs&{\n    data: TraceEventArgsData & {\n      type: string,\n    },\n  };\n}\n\nexport interface TraceEventEventTiming extends TraceEventData {\n  ph: Phase.ASYNC_NESTABLE_START|Phase.ASYNC_NESTABLE_END;\n  id: string;\n  args: TraceEventArgs&{\n    frame: string,\n    data?: TraceEventArgsData&{\n      cancelable: boolean,\n      duration: MilliSeconds,\n      processingEnd: MicroSeconds,\n      processingStart: MicroSeconds,\n      timeStamp: MicroSeconds,\n      interactionId?: number, type: string,\n    },\n  };\n}\n\nexport interface TraceEventEventTimingBegin extends TraceEventEventTiming {\n  ph: Phase.ASYNC_NESTABLE_START;\n}\nexport interface TraceEventEventTimingEnd extends TraceEventEventTiming {\n  ph: Phase.ASYNC_NESTABLE_END;\n}\n\nexport interface TraceEventGPUTask extends TraceEventComplete {\n  name: 'GPUTask';\n  args: TraceEventArgs&{\n    data?: TraceEventArgsData & {\n      /* eslint-disable @typescript-eslint/naming-convention */\n      renderer_pid: ProcessID,\n      used_bytes: number,\n      /* eslint-enable @typescript-eslint/naming-convention */\n    },\n  };\n}\n\nexport interface TraceEventSyntheticNetworkRedirect {\n  url: string;\n  priority: string;\n  ts: MicroSeconds;\n  dur: MicroSeconds;\n}\n\nexport interface TraceEventSyntheticNetworkRequest extends TraceEventComplete {\n  args: TraceEventArgs&{\n    data: TraceEventArgsData & {\n      decodedBodyLength: number,\n      dnsLookup: MicroSeconds,\n      download: MicroSeconds,\n      encodedDataLength: number,\n      finishTime: MicroSeconds,\n      frame: string,\n      fromCache: boolean,\n      fromServiceWorker: boolean,\n      host: string,\n      initialConnection: MicroSeconds,\n      isHttps: boolean,\n      mimeType: string,\n      networkDuration: MicroSeconds,\n      pathname: string,\n      search: string,\n      priority: string,\n      processingDuration: MicroSeconds,\n      protocol: string,\n      proxyNegotiation: MicroSeconds,\n      queueing: MicroSeconds,\n      receiveHeadersEnd: MicroSeconds,\n      redirects: TraceEventSyntheticNetworkRedirect[],\n      redirectionDuration: MicroSeconds,\n      renderBlocking: RenderBlocking,\n      requestId: string,\n      requestingFrameUrl: string,\n      requestSent: MicroSeconds,\n      requestTime: number,\n      sendEnd: MicroSeconds,\n      sendStart: MicroSeconds,\n      statusCode: number,\n      ssl: MicroSeconds,\n      sslStart: MicroSeconds,\n      stalled: MicroSeconds,\n      totalTime: MicroSeconds,\n      url: string,\n      waiting: MicroSeconds,\n    },\n  };\n  cat: 'loading';\n  name: 'SyntheticNetworkRequest';\n  ph: Phase.COMPLETE;\n  dur: MicroSeconds;\n  tdur: MicroSeconds;\n  ts: MicroSeconds;\n  tts: MicroSeconds;\n  pid: ProcessID;\n  tid: ThreadID;\n}\n\n// Snapshot events.\n\nexport interface TraceEventSnapshot extends TraceEventData {\n  args: TraceEventArgs&{\n    snapshot: string,\n  };\n  name: 'Screenshot';\n  cat: 'disabled-by-default-devtools.screenshot';\n  ph: Phase.OBJECT_SNAPSHOT;\n}\n\n// Animation events.\n\nexport interface TraceEventAnimation extends TraceEventData {\n  args: TraceEventArgs&{\n    id?: string,\n    name?: string,\n    nodeId?: number,\n    nodeName?: string,\n    state?: string,\n    compositeFailed?: number,\n    unsupportedProperties?: string[],\n  };\n  name: 'Animation';\n  id2?: {\n    local?: string,\n  };\n}\n\n// Metadata events.\n\nexport interface TraceEventMetadata extends TraceEventData {\n  ph: Phase.METADATA;\n  args: TraceEventArgs&{\n    name?: string,\n    uptime?: string,\n  };\n}\n\nexport interface TraceEventThreadName extends TraceEventMetadata {\n  name: 'thread_name';\n  args: TraceEventArgs&{\n    name?: string,\n  };\n}\n\nexport interface TraceEventProcessName extends TraceEventMetadata {\n  name: 'process_name';\n}\n\n// Mark events.\n\nexport interface TraceEventMark extends TraceEventData {\n  ph: Phase.MARK;\n}\n\nexport interface TraceEventNavigationStart extends TraceEventMark {\n  name: 'navigationStart';\n  args: TraceEventArgs&{\n    data?: TraceEventArgsData & {\n      documentLoaderURL: string,\n      isLoadingMainFrame: boolean,\n      // isOutermostMainFrame was introduced in crrev.com/c/3625434 and exists\n      // because of Fenced Frames\n      // [github.com/WICG/fenced-frame/tree/master/explainer].\n      // Fenced frames introduce a situation where isLoadingMainFrame could be\n      // true for a navigation, but that navigation be within an embedded \"main\n      // frame\", and therefore it wouldn't be on the top level main frame.\n      // In situations where we need to distinguish that, we can rely on\n      // isOutermostMainFrame, which will only be true for navigations on the\n      // top level main frame.\n\n      // This flag is optional as it was introduced in May 2022; so users\n      // reasonably may import traces from before that date that do not have\n      // this field present.\n      isOutermostMainFrame?: boolean, navigationId: string,\n    },\n        frame: string,\n  };\n}\n\nexport interface TraceEventFirstContentfulPaint extends TraceEventMark {\n  name: 'firstContentfulPaint';\n  args: TraceEventArgs&{\n    frame: string,\n    data?: TraceEventArgsData&{\n      navigationId: string,\n    },\n  };\n}\n\nexport interface TraceEventFirstPaint extends TraceEventMark {\n  name: 'firstPaint';\n  args: TraceEventArgs&{\n    frame: string,\n    data?: TraceEventArgsData&{\n      navigationId: string,\n    },\n  };\n}\n\nexport type PageLoadEvent = TraceEventFirstContentfulPaint|TraceEventMarkDOMContent|TraceEventInteractiveTime|\n    TraceEventLargestContentfulPaintCandidate|TraceEventLayoutShift|TraceEventFirstPaint|TraceEventMarkLoad;\n\nexport interface TraceEventLargestContentfulPaintCandidate extends TraceEventMark {\n  name: 'largestContentfulPaint::Candidate';\n  args: TraceEventArgs&{\n    frame: string,\n    data?: TraceEventArgsData&{\n      candidateIndex: number,\n      isOutermostMainFrame: boolean,\n      isMainFrame: boolean,\n      navigationId: string,\n      nodeId: Protocol.DOM.BackendNodeId,\n      type?: string,\n    },\n  };\n}\nexport interface TraceEventLargestImagePaintCandidate extends TraceEventMark {\n  name: 'LargestImagePaint::Candidate';\n  args: TraceEventArgs&{\n    frame: string,\n    data?: TraceEventArgsData&{\n      candidateIndex: number,\n      imageUrl: string,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      DOMNodeId: Protocol.DOM.BackendNodeId,\n    },\n  };\n}\nexport interface TraceEventLargestTextPaintCandidate extends TraceEventMark {\n  name: 'LargestTextPaint::Candidate';\n  args: TraceEventArgs&{\n    frame: string,\n    data?: TraceEventArgsData&{\n      candidateIndex: number,\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      DOMNodeId: Protocol.DOM.BackendNodeId,\n    },\n  };\n}\n\nexport interface TraceEventInteractiveTime extends TraceEventMark {\n  name: 'InteractiveTime';\n  args: TraceEventArgs&{\n    args: {\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      total_blocking_time_ms: number,\n    },\n    frame: string,\n  };\n}\n\n// Instant events.\n\nexport interface TraceEventInstant extends TraceEventData {\n  ph: Phase.INSTANT;\n  s: TraceEventScope;\n}\n\nexport type TraceEventRendererData = TraceEventInstant|TraceEventComplete;\n\nexport interface TraceEventTracingStartedInBrowser extends TraceEventInstant {\n  name: 'TracingStartedInBrowser';\n  args: TraceEventArgs&{\n    data?: TraceEventArgsData & {\n      frameTreeNodeId: number,\n      // Frames can only missing in \"fake\" traces\n      frames?: TraceFrame[], persistentIds: boolean,\n    },\n  };\n}\n\nexport interface TraceEventFrameCommittedInBrowser extends TraceEventInstant {\n  name: 'FrameCommittedInBrowser';\n  args: TraceEventArgs&{\n    data?: TraceEventArgsData & TraceFrame,\n  };\n}\n\nexport interface TraceEventMainFrameViewport extends TraceEventInstant {\n  name: 'PaintTimingVisualizer::Viewport';\n  args: {\n    data: TraceEventArgsData&{\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      viewport_rect: number[],\n    },\n  };\n}\n\nexport interface TraceEventCommitLoad extends TraceEventInstant {\n  name: 'CommitLoad';\n  args: TraceEventArgs&{\n    data?: TraceEventArgsData & {\n      frame: string,\n      isMainFrame: boolean,\n      name: string,\n      nodeId: number,\n      page: string,\n      parent: string,\n      url: string,\n    },\n  };\n}\n\nexport interface TraceEventMarkDOMContent extends TraceEventInstant {\n  name: 'MarkDOMContent';\n  args: TraceEventArgs&{\n    data?: TraceEventArgsData & {\n      frame: string,\n      isMainFrame: boolean,\n      page: string,\n    },\n  };\n}\n\nexport interface TraceEventMarkLoad extends TraceEventInstant {\n  name: 'MarkLoad';\n  args: TraceEventArgs&{\n    data?: TraceEventArgsData & {\n      frame: string,\n      isMainFrame: boolean,\n      page: string,\n    },\n  };\n}\n\nexport interface TraceEventAsync extends TraceEventData {\n  ph: Phase.ASYNC_NESTABLE_START|Phase.ASYNC_NESTABLE_INSTANT|Phase.ASYNC_NESTABLE_END|Phase.ASYNC_STEP_INTO|\n      Phase.ASYNC_BEGIN|Phase.ASYNC_END|Phase.ASYNC_STEP_PAST;\n}\n\nexport type TraceRect = [number, number, number, number];\nexport type TraceImpactedNode = {\n  // These keys come from the trace data, so we have to use underscores.\n  /* eslint-disable @typescript-eslint/naming-convention */\n  new_rect: TraceRect,\n  node_id: Protocol.DOM.BackendNodeId,\n  old_rect: TraceRect,\n  /* eslint-enable @typescript-eslint/naming-convention */\n};\n\ntype LayoutShiftData = TraceEventArgsData&{\n  // These keys come from the trace data, so we have to use underscores.\n  /* eslint-disable @typescript-eslint/naming-convention */\n  cumulative_score: number,\n  frame_max_distance: number,\n  had_recent_input: boolean,\n  impacted_nodes: TraceImpactedNode[] | undefined,\n  is_main_frame: boolean,\n  overall_max_distance: number,\n  region_rects: TraceRect[],\n  score: number,\n  weighted_score_delta: number,\n  /* eslint-enable @typescript-eslint/naming-convention */\n};\n// These keys come from the trace data, so we have to use underscores.\nexport interface TraceEventLayoutShift extends TraceEventInstant {\n  name: 'LayoutShift';\n  normalized?: boolean;\n  args: TraceEventArgs&{\n    frame: string,\n    data?: LayoutShiftData,\n  };\n}\n\ninterface LayoutShiftSessionWindowData {\n  // The sum of the weighted score of all the shifts\n  // that belong to a session window.\n  cumulativeWindowScore: number;\n  // A consecutive generated in the frontend to\n  // to identify a session window.\n  id: number;\n}\nexport interface LayoutShiftParsedData {\n  screenshotSource?: string;\n  timeFromNavigation?: MicroSeconds;\n  // The sum of the weighted scores of the shifts that\n  // belong to a session window up until this shift\n  // (inclusive).\n  cumulativeWeightedScoreInWindow: number;\n  sessionWindowData: LayoutShiftSessionWindowData;\n}\nexport interface SyntheticLayoutShift extends TraceEventLayoutShift {\n  args: TraceEventArgs&{\n    frame: string,\n    data?: LayoutShiftData&{\n      rawEvent: TraceEventLayoutShift,\n    },\n  };\n  parsedData: LayoutShiftParsedData;\n}\n\nexport type Priorty = 'Low'|'High'|'VeryHigh'|'Highest';\nexport type RenderBlocking = 'blocking'|'non_blocking'|'in_body_parser_blocking'|'potentially_blocking';\nexport interface TraceEventResourceSendRequest extends TraceEventInstant {\n  name: 'ResourceSendRequest';\n  args: TraceEventArgs&{\n    data: TraceEventArgsData & {\n      frame: string,\n      requestId: string,\n      url: string,\n      priority: Priorty,\n      renderBlocking?: RenderBlocking,\n    },\n  };\n}\n\nexport interface TraceEventResourceWillSendRequest extends TraceEventInstant {\n  name: 'ResourceWillSendRequest';\n  args: TraceEventArgs&{\n    data: TraceEventArgsData & {\n      requestId: string,\n    },\n  };\n}\n\nexport interface TraceEventResourceFinish extends TraceEventInstant {\n  name: 'ResourceFinish';\n  args: TraceEventArgs&{\n    data: TraceEventArgsData & {\n      decodedBodyLength: number,\n      didFail: boolean,\n      encodedDataLength: number,\n      finishTime: Seconds,\n      requestId: string,\n    },\n  };\n}\n\nexport interface TraceEventResourceReceivedData extends TraceEventInstant {\n  name: 'ResourceReceivedData';\n  args: TraceEventArgs&{\n    data: TraceEventArgsData & {\n      encodedDataLength: number,\n      frame: string,\n      requestId: string,\n    },\n  };\n}\n\nexport interface TraceEventResourceReceiveResponse extends TraceEventInstant {\n  name: 'ResourceReceiveResponse';\n  args: TraceEventArgs&{\n    data: TraceEventArgsData & {\n      encodedDataLength: number,\n      frame: string,\n      fromCache: boolean,\n      fromServiceWorker: boolean,\n      mimeType: string,\n      requestId: string,\n      responseTime: MilliSeconds,\n      statusCode: number,\n      timing: {\n        connectEnd: MilliSeconds,\n        connectStart: MilliSeconds,\n        dnsEnd: MilliSeconds,\n        dnsStart: MilliSeconds,\n        proxyEnd: MilliSeconds,\n        proxyStart: MilliSeconds,\n        pushEnd: MilliSeconds,\n        pushStart: MilliSeconds,\n        receiveHeadersEnd: MilliSeconds,\n        requestTime: number,\n        sendEnd: MilliSeconds,\n        sendStart: MilliSeconds,\n        sslEnd: MilliSeconds,\n        sslStart: MilliSeconds,\n        workerReady: MilliSeconds,\n        workerStart: MilliSeconds,\n      },\n    },\n  };\n}\n\nexport const enum LayoutInvalidationReason {\n  SIZE_CHANGED = 'Size changed',\n  ATTRIBUTE = 'Attribute',\n  ADDED_TO_LAYOUT = 'Added to layout',\n  SCROLLBAR_CHANGED = 'Scrollbar changed',\n  REMOVED_FROM_LAYOUT = 'Removed from layout',\n  STYLE_CHANGED = 'Style changed',\n  FONTS_CHANGED = 'Fonts changed',\n  UNKNOWN = 'Unknown',\n}\n\nexport interface TraceEventLayoutInvalidation extends TraceEventInstant {\n  name: 'LayoutInvalidationTracking'|'ScheduleStyleInvalidationTracking';\n  args: TraceEventArgs&{\n    data: TraceEventArgsData & {\n      frame: string,\n      nodeId: Protocol.DOM.BackendNodeId,\n      reason: LayoutInvalidationReason,\n      nodeName?: string,\n    },\n  };\n}\n\nexport const enum StyleRecalcInvalidationReason {\n  ANIMATION = 'Animation',\n}\n\nexport interface TraceEventStyleRecalcInvalidation extends TraceEventInstant {\n  name: 'StyleRecalcInvalidationTracking';\n  args: TraceEventArgs&{\n    data: TraceEventArgsData & {\n      frame: string,\n      nodeId: Protocol.DOM.BackendNodeId,\n      reason: StyleRecalcInvalidationReason,\n      subtree: boolean,\n      nodeName?: string,\n      extraData?: string,\n    },\n  };\n}\n\nexport interface TraceEventPrePaint extends TraceEventComplete {\n  name: 'PrePaint';\n}\n\nexport type TraceEventNestableAsync = TraceEventNestableAsyncBegin|TraceEventNestableAsyncEnd;\nexport interface TraceEventNestableAsyncBegin extends TraceEventData {\n  ph: Phase.ASYNC_NESTABLE_START;\n  // The id2 field gives flexibility to explicitly specify if an event\n  // id is global among processes or process local. However not all\n  // events use it, so both kind of ids need to be marked as optional.\n  id2?: {local?: string, global?: string};\n  id?: string;\n}\n\nexport interface TraceEventNestableAsyncEnd extends TraceEventData {\n  ph: Phase.ASYNC_NESTABLE_END;\n  id2?: {local?: string, global?: string};\n  id?: string;\n}\n\nexport type TraceEventAsyncPerformanceMeasure = TraceEventPerformanceMeasureBegin|TraceEventPerformanceMeasureEnd;\n\nexport interface TraceEventPerformanceMeasureBegin extends TraceEventNestableAsyncBegin {\n  cat: 'blink.user_timing';\n  id: string;\n}\n\nexport interface TraceEventPerformanceMeasureEnd extends TraceEventNestableAsyncEnd {\n  cat: 'blink.user_timing';\n  id: string;\n}\n\nexport interface TraceEventConsoleTimeBegin extends TraceEventNestableAsyncBegin {\n  cat: 'blink.console';\n  id2: {\n    local: string,\n  };\n}\n\nexport interface TraceEventConsoleTimeEnd extends TraceEventNestableAsyncEnd {\n  cat: 'blink.console';\n  id2: {\n    local: string,\n  };\n}\n\nexport interface TraceEventTimeStamp extends TraceEventData {\n  cat: 'devtools.timeline';\n  name: 'TimeStamp';\n  ph: Phase.INSTANT;\n  id: string;\n  args: TraceEventArgs&{\n    data: TraceEventArgsData & {\n      frame: string,\n      message: string,\n    },\n  };\n}\n\nexport interface TraceEventPerformanceMark extends TraceEventData {\n  cat: 'blink.user_timing';\n  ph: Phase.INSTANT|Phase.MARK;\n  id: string;\n}\n\n// Nestable async events with a duration are made up of two distinct\n// events: the begin, and the end. We need both of them to be able to\n// display the right information, so we create these synthetic events.\nexport interface TraceEventSyntheticNestableAsyncEvent extends TraceEventData {\n  id?: string;\n  id2?: {local?: string, global?: string};\n  dur: MicroSeconds;\n  args: TraceEventArgs&{\n    data: TraceEventArgsData & {\n      beginEvent: TraceEventNestableAsyncBegin,\n      endEvent: TraceEventNestableAsyncEnd,\n    },\n  };\n}\n\nexport interface TraceEventSyntheticUserTiming extends TraceEventSyntheticNestableAsyncEvent {\n  id: string;\n  dur: MicroSeconds;\n  args: TraceEventArgs&{\n    data: TraceEventArgsData & {\n      beginEvent: TraceEventPerformanceMeasureBegin,\n      endEvent: TraceEventPerformanceMeasureEnd,\n    },\n  };\n}\n\nexport interface TraceEventSyntheticConsoleTiming extends TraceEventSyntheticNestableAsyncEvent {\n  id2: {local: string};\n  dur: MicroSeconds;\n  args: TraceEventArgs&{\n    data: TraceEventArgsData & {\n      beginEvent: TraceEventConsoleTimeBegin,\n      endEvent: TraceEventConsoleTimeEnd,\n    },\n  };\n}\n\nexport interface SyntheticInteractionEvent extends TraceEventSyntheticNestableAsyncEvent {\n  // InteractionID and type are available within the beginEvent's data, but we\n  // put them on the top level for ease of access.\n  interactionId: number;\n  type: string;\n  // This is equivalent to startEvent.ts;\n  ts: MicroSeconds;\n  // This duration can be calculated via endEvent.ts - startEvent.ts, but we do\n  // that and put it here to make it easier. This also makes these events\n  // consistent with real events that have a dur field.\n  dur: MicroSeconds;\n  args: TraceEventArgs&{\n    data: TraceEventArgsData & {\n      beginEvent: TraceEventEventTimingBegin,\n      endEvent: TraceEventEventTimingEnd,\n    },\n  };\n}\n\nexport function isSyntheticInteractionEvent(event: TraceEventData): event is SyntheticInteractionEvent {\n  return Boolean(\n      'interactionId' in event && event.args?.data && 'beginEvent' in event.args.data && 'endEvent' in event.args.data);\n}\n\nclass ProfileIdTag {\n  readonly #profileIdTag: (symbol|undefined);\n}\nexport type ProfileID = string&ProfileIdTag;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function ProfileID(value: string): ProfileID {\n  return value as ProfileID;\n}\n\nclass CallFrameIdTag {\n  readonly #callFrameIdTag: (symbol|undefined);\n}\nexport type CallFrameID = number&CallFrameIdTag;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function CallFrameID(value: number): CallFrameID {\n  return value as CallFrameID;\n}\n\nclass ProcessIdTag {\n  readonly #processIdTag: (symbol|undefined);\n}\nexport type ProcessID = number&ProcessIdTag;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function ProcessID(value: number): ProcessID {\n  return value as ProcessID;\n}\n\nclass ThreadIdTag {\n  readonly #threadIdTag: (symbol|undefined);\n}\nexport type ThreadID = number&ThreadIdTag;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport function ThreadID(value: number): ThreadID {\n  return value as ThreadID;\n}\n\nexport function isTraceEventComplete(event: TraceEventData): event is TraceEventComplete {\n  return event.ph === Phase.COMPLETE;\n}\n\nexport function isTraceEventDispatch(event: TraceEventData): event is TraceEventDispatch {\n  return event.name === 'EventDispatch';\n}\n\nexport function isTraceEventInstant(event: TraceEventData): event is TraceEventInstant {\n  return event.ph === Phase.INSTANT;\n}\n\nexport function isTraceEventRendererEvent(event: TraceEventData): event is TraceEventRendererData {\n  return isTraceEventInstant(event) || isTraceEventComplete(event);\n}\n\nexport function isThreadName(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventThreadName {\n  return traceEventData.name === 'thread_name';\n}\n\nexport function isProcessName(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventProcessName {\n  return traceEventData.name === 'process_name';\n}\n\nexport function isTraceEventTracingStartedInBrowser(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventTracingStartedInBrowser {\n  return traceEventData.name === 'TracingStartedInBrowser';\n}\n\nexport function isTraceEventFrameCommittedInBrowser(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventFrameCommittedInBrowser {\n  return traceEventData.name === 'FrameCommittedInBrowser';\n}\n\nexport function isTraceEventCommitLoad(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventCommitLoad {\n  return traceEventData.name === 'CommitLoad';\n}\n\nexport function isTraceEventNavigationStart(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventNavigationStart {\n  return traceEventData.name === 'navigationStart';\n}\n\nexport function isTraceEventAnimation(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventAnimation {\n  return traceEventData.name === 'Animation';\n}\n\nexport function isTraceEventLayoutShift(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventLayoutShift {\n  return traceEventData.name === 'LayoutShift';\n}\n\nexport function isTraceEventLayoutInvalidation(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventLayoutInvalidation {\n  return traceEventData.name === 'LayoutInvalidationTracking' ||\n      traceEventData.name === 'ScheduleStyleInvalidationTracking';\n}\n\nexport function isTraceEventStyleRecalcInvalidation(traceEventData: TraceEventData):\n    traceEventData is TraceEventStyleRecalcInvalidation {\n  return traceEventData.name === 'StyleRecalcInvalidationTracking';\n}\n\nexport function isTraceEventFirstContentfulPaint(traceEventData: TraceEventData):\n    traceEventData is TraceEventFirstContentfulPaint {\n  return traceEventData.name === 'firstContentfulPaint';\n}\n\nexport function isTraceEventLargestContentfulPaintCandidate(traceEventData: TraceEventData):\n    traceEventData is TraceEventLargestContentfulPaintCandidate {\n  return traceEventData.name === 'largestContentfulPaint::Candidate';\n}\nexport function isTraceEventLargestImagePaintCandidate(traceEventData: TraceEventData):\n    traceEventData is TraceEventLargestImagePaintCandidate {\n  return traceEventData.name === 'LargestImagePaint::Candidate';\n}\nexport function isTraceEventLargestTextPaintCandidate(traceEventData: TraceEventData):\n    traceEventData is TraceEventLargestTextPaintCandidate {\n  return traceEventData.name === 'LargestTextPaint::Candidate';\n}\n\nexport function isTraceEventMarkLoad(traceEventData: TraceEventData): traceEventData is TraceEventMarkLoad {\n  return traceEventData.name === 'MarkLoad';\n}\n\nexport function isTraceEventFirstPaint(traceEventData: TraceEventData): traceEventData is TraceEventFirstPaint {\n  return traceEventData.name === 'firstPaint';\n}\n\nexport function isTraceEventMarkDOMContent(traceEventData: TraceEventData): traceEventData is TraceEventMarkDOMContent {\n  return traceEventData.name === 'MarkDOMContent';\n}\n\nexport function isTraceEventInteractiveTime(traceEventData: TraceEventData):\n    traceEventData is TraceEventInteractiveTime {\n  return traceEventData.name === 'InteractiveTime';\n}\n\nexport function isTraceEventEventTiming(traceEventData: TraceEventData): traceEventData is TraceEventEventTiming {\n  return traceEventData.name === 'EventTiming';\n}\n\nexport function isTraceEventEventTimingEnd(traceEventData: TraceEventData): traceEventData is TraceEventEventTimingEnd {\n  return isTraceEventEventTiming(traceEventData) && traceEventData.ph === Phase.ASYNC_NESTABLE_END;\n}\nexport function isTraceEventEventTimingStart(traceEventData: TraceEventData):\n    traceEventData is TraceEventEventTimingBegin {\n  return isTraceEventEventTiming(traceEventData) && traceEventData.ph === Phase.ASYNC_NESTABLE_START;\n}\n\nexport function isTraceEventGPUTask(traceEventData: TraceEventData): traceEventData is TraceEventGPUTask {\n  return traceEventData.name === 'GPUTask';\n}\n\nexport function isTraceEventProfile(traceEventData: TraceEventData): traceEventData is TraceEventProfile {\n  return traceEventData.name === 'Profile';\n}\n\nexport function isTraceEventProfileChunk(traceEventData: TraceEventData): traceEventData is TraceEventProfileChunk {\n  return traceEventData.name === 'ProfileChunk';\n}\n\nexport function isTraceEventResourceSendRequest(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventResourceSendRequest {\n  return traceEventData.name === 'ResourceSendRequest';\n}\n\nexport function isTraceEventResourceReceiveResponse(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventResourceReceiveResponse {\n  return traceEventData.name === 'ResourceReceiveResponse';\n}\n\nexport function isTraceEventResourceFinish(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventResourceFinish {\n  return traceEventData.name === 'ResourceFinish';\n}\n\nexport function isTraceEventResourceWillSendRequest(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventResourceWillSendRequest {\n  return traceEventData.name === 'ResourceWillSendRequest';\n}\n\nexport function isTraceEventResourceReceivedData(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventResourceReceivedData {\n  return traceEventData.name === 'ResourceReceivedData';\n}\n\nexport function isSyntheticNetworkRequestDetailsEvent(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventSyntheticNetworkRequest {\n  return traceEventData.name === 'SyntheticNetworkRequest';\n}\n\nexport function isTraceEventPrePaint(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventPrePaint {\n  return traceEventData.name === 'PrePaint';\n}\n\nexport function isTraceEventNavigationStartWithURL(event: TraceEventData): event is TraceEventNavigationStart {\n  return Boolean(isTraceEventNavigationStart(event) && event.args.data && event.args.data.documentLoaderURL !== '');\n}\n\nexport function isTraceEventMainFrameViewport(\n    traceEventData: TraceEventData,\n    ): traceEventData is TraceEventMainFrameViewport {\n  return traceEventData.name === 'PaintTimingVisualizer::Viewport';\n}\n\nexport function isSyntheticUserTimingTraceEvent(traceEventData: TraceEventData):\n    traceEventData is TraceEventSyntheticUserTiming {\n  if (traceEventData.cat !== 'blink.user_timing') {\n    return false;\n  }\n  const data = traceEventData.args?.data;\n  if (!data) {\n    return false;\n  }\n  return 'beginEvent' in data && 'endEvent' in data;\n}\n\nexport function isSyntheticConsoleTimingTraceEvent(traceEventData: TraceEventData):\n    traceEventData is TraceEventSyntheticConsoleTiming {\n  if (traceEventData.cat !== 'blink.console') {\n    return false;\n  }\n  const data = traceEventData.args?.data;\n  if (!data) {\n    return false;\n  }\n  return 'beginEvent' in data && 'endEvent' in data;\n}\n\nexport function isTraceEventPerformanceMeasure(traceEventData: TraceEventData):\n    traceEventData is TraceEventPerformanceMeasureBegin|TraceEventPerformanceMeasureEnd {\n  return isTraceEventAsyncPhase(traceEventData) && traceEventData.cat === 'blink.user_timing';\n}\n\nexport function isTraceEventPerformanceMark(traceEventData: TraceEventData):\n    traceEventData is TraceEventPerformanceMark {\n  return (traceEventData.ph === Phase.MARK || traceEventData.ph === Phase.INSTANT) &&\n      traceEventData.cat === 'blink.user_timing';\n}\n\nexport function isTraceEventConsoleTime(traceEventData: TraceEventData): traceEventData is TraceEventConsoleTimeBegin|\n    TraceEventConsoleTimeEnd {\n  return isTraceEventAsyncPhase(traceEventData) && traceEventData.cat === 'blink.console';\n}\n\nexport function isTraceEventTimeStamp(traceEventData: TraceEventData): traceEventData is TraceEventTimeStamp {\n  return traceEventData.ph === Phase.INSTANT && traceEventData.name === 'TimeStamp';\n}\n\nexport interface TraceEventAsync extends TraceEventData {\n  ph: Phase.ASYNC_NESTABLE_START|Phase.ASYNC_NESTABLE_INSTANT|Phase.ASYNC_NESTABLE_END|Phase.ASYNC_STEP_INTO|\n      Phase.ASYNC_BEGIN|Phase.ASYNC_END|Phase.ASYNC_STEP_PAST;\n}\n\nexport function isTraceEventAsyncPhase(traceEventData: TraceEventData): boolean {\n  const asyncPhases = new Set([\n    Phase.ASYNC_NESTABLE_START,\n    Phase.ASYNC_NESTABLE_INSTANT,\n    Phase.ASYNC_NESTABLE_END,\n    Phase.ASYNC_STEP_INTO,\n    Phase.ASYNC_BEGIN,\n    Phase.ASYNC_END,\n    Phase.ASYNC_STEP_PAST,\n  ]);\n  return asyncPhases.has(traceEventData.ph);\n}\n\nexport function isSyntheticLayoutShift(traceEventData: TraceEventData): traceEventData is SyntheticLayoutShift {\n  if (!isTraceEventLayoutShift(traceEventData) || !traceEventData.args.data) {\n    return false;\n  }\n  return 'rawEvent' in traceEventData.args.data;\n}\n"]}