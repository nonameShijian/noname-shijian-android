{"version":3,"file":"StylePropertyHighlighter.js","sourceRoot":"","sources":["../../../../../../front_end/panels/elements/StylePropertyHighlighter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2015 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport {highlightElement} from '../utils/utils.js';\n\nimport {type StylePropertiesSection} from './StylePropertiesSection.js';\nimport {StylePropertyTreeElement} from './StylePropertyTreeElement.js';\nimport {type StylesSidebarPane} from './StylesSidebarPane.js';\n\nexport class StylePropertyHighlighter {\n  private readonly styleSidebarPane: StylesSidebarPane;\n  constructor(ssp: StylesSidebarPane) {\n    this.styleSidebarPane = ssp;\n  }\n\n  /**\n   * Expand all shorthands, find the given property, scroll to it and highlight it.\n   */\n  highlightProperty(cssProperty: SDK.CSSProperty.CSSProperty): void {\n    // Expand all shorthands.\n    for (const section of this.styleSidebarPane.allSections()) {\n      for (let treeElement = section.propertiesTreeOutline.firstChild(); treeElement;\n           treeElement = treeElement.nextSibling) {\n        void treeElement.onpopulate();\n      }\n    }\n\n    const {treeElement, section} = this.findTreeElementAndSection(treeElement => treeElement.property === cssProperty);\n    if (treeElement) {\n      treeElement.parent && treeElement.parent.expand();\n      this.scrollAndHighlightTreeElement(treeElement);\n      if (section) {\n        section.element.focus();\n      }\n    }\n  }\n\n  findAndHighlightSectionBlock(sectionBlockName: string): void {\n    const block = this.styleSidebarPane.getSectionBlockByName(sectionBlockName);\n    if (!block || block.sections.length === 0) {\n      return;\n    }\n    const [section] = block.sections;\n    section.showAllItems();\n    highlightElement(block.titleElement() as HTMLElement);\n  }\n\n  /**\n   * Find the first non-overridden property that matches the provided name, scroll to it and highlight it.\n   */\n  findAndHighlightPropertyName(propertyName: string): void {\n    for (const section of this.styleSidebarPane.allSections()) {\n      if (!section.style().hasActiveProperty(propertyName)) {\n        continue;\n      }\n      section.showAllItems();\n      const treeElement = this.findTreeElementFromSection(\n          treeElement => treeElement.property.name === propertyName && !treeElement.overloaded(), section);\n      if (treeElement) {\n        this.scrollAndHighlightTreeElement(treeElement);\n        if (section) {\n          section.element.focus();\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Traverse the styles pane tree, execute the provided callback for every tree element found, and\n   * return the first tree element and corresponding section for which the callback returns a truthy value.\n   */\n  private findTreeElementAndSection(compareCb: (arg0: StylePropertyTreeElement) => boolean): {\n    treeElement: StylePropertyTreeElement|null,\n    section: StylePropertiesSection|null,\n  } {\n    for (const section of this.styleSidebarPane.allSections()) {\n      const treeElement = this.findTreeElementFromSection(compareCb, section);\n      if (treeElement) {\n        return {treeElement, section};\n      }\n    }\n    return {treeElement: null, section: null};\n  }\n\n  private findTreeElementFromSection(\n      compareCb: (arg0: StylePropertyTreeElement) => boolean, section: StylePropertiesSection): StylePropertyTreeElement\n      |null {\n    let treeElement = section.propertiesTreeOutline.firstChild();\n    while (treeElement && (treeElement instanceof StylePropertyTreeElement)) {\n      if (compareCb(treeElement)) {\n        return treeElement;\n      }\n      treeElement = treeElement.traverseNextTreeElement(false, null, true);\n    }\n    return null;\n  }\n\n  private scrollAndHighlightTreeElement(treeElement: StylePropertyTreeElement): void {\n    highlightElement(treeElement.listItemElement);\n  }\n}\n"]}