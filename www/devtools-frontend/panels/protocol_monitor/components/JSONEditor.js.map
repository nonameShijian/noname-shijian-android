{"version":3,"file":"JSONEditor.js","sourceRoot":"","sources":["../../../../../../../front_end/panels/protocol_monitor/components/JSONEditor.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport '../../recorder/components/components.js';\n\nimport * as Host from '../../../core/host/host.js';\nimport * as SDK from '../../../core/sdk/sdk.js';\nimport * as Dialogs from '../../../ui/components/dialogs/dialogs.js';\nimport * as Menus from '../../../ui/components/menus/menus.js';\nimport * as LitHtml from '../../../ui/lit-html/lit-html.js';\nimport * as RecorderComponents from '../../recorder/components/components.js';\n\nimport editorWidgetStyles from './JSONEditor.css.js';\n\nconst {html, Decorators, LitElement, Directives, nothing} = LitHtml;\nconst {customElement, property, state} = Decorators;\nconst {live, classMap} = Directives;\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'devtools-json-editor': JSONEditor;\n  }\n}\n\nexport interface Parameter {\n  type: string;\n  optional: boolean;\n  value: string|undefined;\n  name: string;\n}\n\nexport interface Command {\n  command: string;\n  parameters: {[x: string]: unknown};\n  targetId?: string;\n}\n\n/**\n * Parents should listen for this event and register the listeners provided by\n * this event\"\n */\nexport class SubmitEditorEvent extends Event {\n  static readonly eventName = 'submiteditor';\n  readonly data: Command;\n\n  constructor(data: Command) {\n    super(SubmitEditorEvent.eventName);\n    this.data = data;\n  }\n}\n\n@customElement('devtools-json-editor')\nexport class JSONEditor extends LitElement {\n  static override styles = [editorWidgetStyles];\n  @property() declare protocolMethodWithParametersMap: Map<string, Parameter[]>;\n  @property() declare targetManager;\n  @state() declare parameters: Record<string, Parameter>;\n  @state() command: string = '';\n  @state() targetId?: string;\n  constructor() {\n    super();\n    this.parameters = {};\n    this.targetManager = SDK.TargetManager.TargetManager.instance();\n    this.targetId = this.targetManager.targets().length !== 0 ? this.targetManager.targets()[0].id() : undefined;\n    this.addEventListener('keydown', (event: Event) => {\n      if ((event as KeyboardEvent).key === 'Enter' &&\n          ((event as KeyboardEvent).metaKey || (event as KeyboardEvent).ctrlKey)) {\n        this.dispatchEvent(new SubmitEditorEvent({\n          command: this.command,\n          parameters: this.getParameters(),\n          targetId: this.targetId,\n        }));\n      }\n    });\n  }\n\n  #copyToClipboard(): void {\n    const commandJson = JSON.stringify({command: this.command, parameters: this.getParameters()});\n    Host.InspectorFrontendHost.InspectorFrontendHostInstance.copyText(commandJson);\n  }\n\n  #handleCommandSend(): void {\n    this.dispatchEvent(new SubmitEditorEvent({\n      command: this.command,\n      parameters: this.getParameters(),\n      targetId: this.targetId,\n    }));\n  }\n\n  getParameters(): {[x: string]: unknown} {\n    const formattedParameters: {[x: string]: unknown} = {};\n    for (const [key, param] of Object.entries(this.parameters)) {\n      if (param.value !== undefined) {\n        if (param.type === 'number') {\n          formattedParameters[key] = Number(param.value);\n        } else if (param.type === 'boolean') {\n          formattedParameters[key] = Boolean(param.value);\n        } else {\n          formattedParameters[key] = param.value;\n        }\n      }\n    }\n    return formattedParameters;\n  }\n\n  #populateParametersForCommand(command: string): void {\n    const parameters = this.protocolMethodWithParametersMap.get(command);\n    const newParameters: Record<string, Parameter> = {};\n    if (parameters && parameters.length !== 0) {\n      const parametersPerCommand = this.protocolMethodWithParametersMap.get(this.command);\n      if (parametersPerCommand) {\n        for (const parameter of parametersPerCommand) {\n          newParameters[parameter.name] = {\n            optional: parameter.optional,\n            type: parameter.type,\n            value: parameter.value || undefined,\n            name: parameter.name,\n          };\n        }\n        this.parameters = newParameters;\n      }\n    }\n  }\n\n  #handleParameterInputBlur = (event: Event, parameterName: string): void => {\n    if (event.target instanceof RecorderComponents.RecorderInput.RecorderInput) {\n      const value = event.target.value;\n      this.parameters[parameterName].value = value;\n    }\n  };\n\n  #handleCommandInputBlur = async(event: Event): Promise<void> => {\n    this.parameters = {};\n    if (event.target instanceof RecorderComponents.RecorderInput.RecorderInput) {\n      this.command = event.target.value;\n    }\n    this.#populateParametersForCommand(this.command);\n  };\n\n  #computeTargetLabel(target: SDK.Target.Target): string {\n    return `${target.name()} (${target.inspectedURL()})`;\n  }\n\n  #renderTargetSelectorRow(): LitHtml.TemplateResult|undefined {\n    const target = this.targetManager.targets().find(el => el.id() === this.targetId);\n    const targetLabel = target ? this.#computeTargetLabel(target) : '';\n    // clang-format off\n    return html`\n    <div class=\"row attribute padded\" data-attribute=\"type\">\n      <div>target<span class=\"separator\">:</span></div>\n      <${Menus.SelectMenu.SelectMenu.litTagName}\n            class=\"target-select-menu\"\n            @selectmenuselected=${this.#onTargetSelected}\n            .showDivider=${true}\n            .showArrow=${true}\n            .sideButton=${false}\n            .showSelectedItem=${true}\n            .showConnector=${false}\n            .position=${Dialogs.Dialog.DialogVerticalPosition.BOTTOM}\n            .buttonTitle=${targetLabel}\n          >\n          ${LitHtml.Directives.repeat(\n              this.targetManager.targets(),\n              target => {\n                return LitHtml.html`<${Menus.Menu.MenuItem.litTagName}\n                .value=${target.id()}\n              >\n                  ${this.#computeTargetLabel(target)}\n              </${Menus.Menu.MenuItem.litTagName}>`;\n            },\n            )}\n          </${Menus.SelectMenu.SelectMenu.litTagName}>\n    </div>\n  `;\n    // clang-format on\n  }\n\n  #onTargetSelected(event: Menus.SelectMenu.SelectMenuItemSelectedEvent): void {\n    this.targetId = event.itemValue as string;\n    this.requestUpdate();\n  }\n\n  #renderCommandRow(): LitHtml.TemplateResult|undefined {\n    // clang-format off\n    return html`<div class=\"row attribute padded\" data-attribute=\"type\">\n      <div>command<span class=\"separator\">:</span></div>\n      <devtools-recorder-input\n        .disabled=${false}\n        .options=${[...this.protocolMethodWithParametersMap.keys()]}\n        .value=${this.command}\n        .placeholder=${'Enter your command...'}\n        @blur=${this.#handleCommandInputBlur}\n      ></devtools-recorder-input>\n    </div>`;\n    // clang-format on\n  }\n\n  /**\n   * Renders the line with the word \"parameter\" in red. As opposed to the renderParametersRow method,\n   * it does not render the value of a parameter.\n   */\n  #renderParameterRow(): LitHtml.TemplateResult|undefined {\n    // clang-format off\n    return html`<div class=\"row attribute padded\" data-attribute=\"type\">\n      <div>parameters<span class=\"separator\">:</span></div>\n    </div>`;\n    // clang-format on\n  }\n\n  /**\n   * Renders the parameters list corresponding to a specific CDP command.\n   */\n  #renderParameters(parameters: {\n    [x: string]: Parameter,\n  }): LitHtml.TemplateResult|undefined {\n    parameters = Object.fromEntries(\n        Object.entries(parameters)\n            .sort(([, a]: [string, Parameter], [, b]: [string, Parameter]) => Number(a.optional) - Number(b.optional)),\n    );\n\n    // clang-format off\n    return html`\n      <ul>\n      ${Object.keys(parameters).map(key => {\n      const value = JSON.stringify(parameters[key].value);\n      const classes = { colorBlue: parameters[key].optional};\n      return html`\n            <div class=\"row attribute padded double\" data-attribute=\"type\">\n              <div class=${classMap(classes)}>${key}<span class=\"separator\">:</span></div>\n              <devtools-recorder-input\n                .disabled=${false}\n                .value=${live(value ?? '')}\n                .placeholder=${'Enter your parameter...'}\n                @blur=${(event: Event) : void => {\n                  this.#handleParameterInputBlur(event, key);}\n                }\n              ></devtools-recorder-input>\n            </div>\n            `;\n        })}\n      </ul>`;\n    // clang-format on\n  }\n\n  override render(): LitHtml.TemplateResult {\n    // clang-format off\n    return html`\n    <div class=\"wrapper\">\n      ${this.#renderTargetSelectorRow()}\n      ${this.#renderCommandRow()}\n      ${this.parameters && Object.keys((this.parameters)).length !== 0 ? html`\n          ${this.#renderParameterRow()}\n          ${this.#renderParameters(this.parameters)}\n        ` : nothing}\n      <devtools-pm-toolbar @copycommand=${this.#copyToClipboard} @commandsent=${this.#handleCommandSend}></devtools-pm-toolbar>\n    </div>`;\n    // clang-format on\n  }\n}\n"]}