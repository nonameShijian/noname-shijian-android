{"version":3,"file":"LayoutShiftsTrackAppender.js","sourceRoot":"","sources":["../../../../../../front_end/panels/timeline/LayoutShiftsTrackAppender.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\nimport * as TraceEngine from '../../models/trace/trace.js';\nimport type * as PerfUI from '../../ui/legacy/components/perf_ui/perf_ui.js';\n\nimport {\n  type CompatibilityTracksAppender,\n  type TrackAppender,\n  type HighlightedEntryInfo,\n  type TrackAppenderName,\n} from './CompatibilityTracksAppender.js';\nimport * as i18n from '../../core/i18n/i18n.js';\nimport {buildGroupStyle, buildTrackHeader, getFormattedTime} from './AppenderUtils.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Timeline Flame Chart Data Provider of the Performance panel\n   */\n  layoutShifts: 'Layout Shifts',\n};\n\nconst str_ = i18n.i18n.registerUIStrings('panels/timeline/LayoutShiftsTrackAppender.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\nexport class LayoutShiftsTrackAppender implements TrackAppender {\n  readonly appenderName: TrackAppenderName = 'LayoutShifts';\n\n  #compatibilityBuilder: CompatibilityTracksAppender;\n  #flameChartData: PerfUI.FlameChart.FlameChartTimelineData;\n  #traceParsedData: Readonly<TraceEngine.Handlers.Migration.PartialTraceData>;\n\n  constructor(\n      compatibilityBuilder: CompatibilityTracksAppender, flameChartData: PerfUI.FlameChart.FlameChartTimelineData,\n      traceParsedData: TraceEngine.Handlers.Migration.PartialTraceData) {\n    this.#compatibilityBuilder = compatibilityBuilder;\n    this.#flameChartData = flameChartData;\n    this.#traceParsedData = traceParsedData;\n  }\n\n  /**\n   * Appends into the flame chart data the data corresponding to the\n   * layout shifts track.\n   * @param trackStartLevel the horizontal level of the flame chart events where\n   * the track's events will start being appended.\n   * @param expanded wether the track should be rendered expanded.\n   * @returns the first available level to append more data after having\n   * appended the track's events.\n   */\n  appendTrackAtLevel(trackStartLevel: number, expanded?: boolean): number {\n    if (this.#traceParsedData.LayoutShifts.clusters.length === 0) {\n      return trackStartLevel;\n    }\n    this.#appendTrackHeaderAtLevel(trackStartLevel, expanded);\n    return this.#appendLayoutShiftsAtLevel(trackStartLevel);\n  }\n\n  /**\n   * Adds into the flame chart data the header corresponding to the\n   * layout shifts track. A header is added in the shape of a group in the\n   * flame chart data. A group has a predefined style and a reference\n   * to the definition of the legacy track (which should be removed\n   * in the future).\n   * @param currentLevel the flame chart level at which the header is\n   * appended.\n   */\n  #appendTrackHeaderAtLevel(currentLevel: number, expanded?: boolean): void {\n    const style = buildGroupStyle({collapsible: false});\n    const group = buildTrackHeader(\n        currentLevel, i18nString(UIStrings.layoutShifts), style,\n        /* selectable= */ true, expanded);\n    this.#compatibilityBuilder.registerTrackForGroup(group, this);\n  }\n\n  /**\n   * Adds into the flame chart data all the layout shifts. These are taken from\n   * the clusters that are collected in the LayoutShiftsHandler.\n   * @param currentLevel the flame chart level from which layout shifts will\n   * be appended.\n   * @returns the next level after the last occupied by the appended\n   * layout shifts (the first available level to append more data).\n   */\n  #appendLayoutShiftsAtLevel(currentLevel: number): number {\n    const allLayoutShifts = this.#traceParsedData.LayoutShifts.clusters.flatMap(cluster => cluster.events);\n    const newLevel = this.#compatibilityBuilder.appendEventsAtLevel(allLayoutShifts, currentLevel, this);\n\n    // Bit of a hack: LayoutShifts are instant events, so have no duration. But\n    // OPP doesn't do well at making tiny events easy to spot and click. So we\n    // set it to a small duration so that the user is able to see and click\n    // them more easily. Long term we will explore a better UI solution to\n    // allow us to do this properly and not hack around it.\n    const msDuration = TraceEngine.Types.Timing.MicroSeconds(5_000);\n    for (let i = 0; i < allLayoutShifts.length; ++i) {\n      const index = this.#compatibilityBuilder.indexForEvent(allLayoutShifts[i]);\n      if (index === undefined) {\n        continue;\n      }\n      this.#flameChartData.entryTotalTimes[index] = TraceEngine.Helpers.Timing.microSecondsToMilliseconds(msDuration);\n    }\n    return newLevel;\n  }\n\n  /*\n    ------------------------------------------------------------------------------------\n     The following methods  are invoked by the flame chart renderer to query features about\n     events on rendering.\n    ------------------------------------------------------------------------------------\n  */\n\n  /**\n   * Gets the color an event added by this appender should be rendered with.\n   */\n  colorForEvent(_event: TraceEngine.Types.TraceEvents.TraceEventData): string {\n    return 'rgb(155 127 230)';\n  }\n\n  /**\n   * Gets the title an event added by this appender should be rendered with.\n   */\n  titleForEvent(event: TraceEngine.Types.TraceEvents.TraceEventData): string {\n    if (TraceEngine.Types.TraceEvents.isTraceEventLayoutShift(event)) {\n      return 'Layout shift';\n    }\n    return event.name;\n  }\n\n  /**\n   * Returns the info shown when an event added by this appender\n   * is hovered in the timeline.\n   */\n  highlightedEntryInfo(event: TraceEngine.Types.TraceEvents.TraceEventLayoutShift): HighlightedEntryInfo {\n    const title = this.titleForEvent(event);\n    return {title, formattedTime: getFormattedTime(event.dur)};\n  }\n}\n"]}