{"version":3,"file":"PreloadingTreeElement.js","sourceRoot":"","sources":["../../../../../../front_end/panels/application/PreloadingTreeElement.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as i18n from '../../core/i18n/i18n.js';\nimport * as UI from '../../ui/legacy/legacy.js';\nimport type * as SDK from '../../core/sdk/sdk.js';\nimport type * as Platform from '../../core/platform/platform.js';\n\nimport {ApplicationPanelTreeElement} from './ApplicationPanelTreeElement.js';\nimport {type ResourcesPanel} from './ResourcesPanel.js';\n\nimport {PreloadingRuleSetView, PreloadingAttemptView, PreloadingResultView} from './preloading/PreloadingView.js';\n\nconst UIStrings = {\n  /**\n   *@description Text in Application Panel Sidebar of the Application panel\n   */\n  speculationRules: 'Speculation Rules',\n  /**\n   *@description Text in Application Panel Sidebar of the Application panel\n   */\n  preloads: 'Preloads',\n  /**\n   *@description Text in Application Panel Sidebar of the Application panel\n   */\n  thisPage: 'This Page',\n};\nconst str_ = i18n.i18n.registerUIStrings('panels/application/PreloadingTreeElement.ts', UIStrings);\nconst i18nString = i18n.i18n.getLocalizedString.bind(undefined, str_);\n\ntype M = SDK.PreloadingModel.PreloadingModel;\n\nexport class PreloadingTreeElement<V extends PreloadingRuleSetView|PreloadingAttemptView|PreloadingResultView> extends\n    ApplicationPanelTreeElement {\n  private model?: M;\n  private ctorV: {new(model: M): V};\n  private view?: V;\n  private path: Platform.DevToolsPath.UrlString;\n  #selectedInternal: boolean;\n\n  static newForPreloadingRuleSetView(resourcesPanel: ResourcesPanel): PreloadingTreeElement<PreloadingRuleSetView> {\n    return new PreloadingTreeElement(\n        resourcesPanel, PreloadingRuleSetView, 'rule-set', i18nString(UIStrings.speculationRules));\n  }\n\n  static newForPreloadingAttemptView(resourcesPanel: ResourcesPanel): PreloadingTreeElement<PreloadingAttemptView> {\n    return new PreloadingTreeElement(resourcesPanel, PreloadingAttemptView, 'attempt', i18nString(UIStrings.preloads));\n  }\n\n  static newForPreloadingResultView(resourcesPanel: ResourcesPanel): PreloadingTreeElement<PreloadingResultView> {\n    return new PreloadingTreeElement(resourcesPanel, PreloadingResultView, 'result', i18nString(UIStrings.thisPage));\n  }\n\n  constructor(resourcesPanel: ResourcesPanel, ctorV: {new(model: M): V}, path: string, title: string) {\n    super(resourcesPanel, title, false);\n\n    this.ctorV = ctorV;\n    this.path = 'preloading://{path}' as Platform.DevToolsPath.UrlString;\n\n    const icon = UI.Icon.Icon.create('arrow-up-down', 'resource-tree-item');\n    this.setLeadingIcons([icon]);\n    this.#selectedInternal = false;\n\n    // TODO(https://crbug.com/1384419): Set link\n  }\n\n  override get itemURL(): Platform.DevToolsPath.UrlString {\n    return this.path;\n  }\n\n  initialize(model: SDK.PreloadingModel.PreloadingModel): void {\n    this.model = model;\n\n    // Show the view if the model was initialized after selection.\n    if (this.#selectedInternal && !this.view) {\n      this.onselect(false);\n    }\n  }\n\n  override onselect(selectedByUser?: boolean): boolean {\n    super.onselect(selectedByUser);\n    this.#selectedInternal = true;\n\n    if (!this.model) {\n      return false;\n    }\n\n    if (!this.view) {\n      this.view = new this.ctorV(this.model);\n    }\n\n    this.showView(this.view);\n    // TODO(https://crbug.com/1384419): Report metrics when the panel shown.\n\n    return false;\n  }\n}\n"]}