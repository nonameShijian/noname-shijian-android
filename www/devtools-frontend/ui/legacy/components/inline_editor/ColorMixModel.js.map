{"version":3,"file":"ColorMixModel.js","sourceRoot":"","sources":["../../../../../../../../front_end/ui/legacy/components/inline_editor/ColorMixModel.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2023 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as CodeMirror from '../../../../third_party/codemirror.next/codemirror.next.js';\n\nconst cssParser = CodeMirror.css.cssLanguage.parser;\n\n// color-mix() = color-mix( <color-interpolation-method> , [ <color> && <percentage [0,100]>? ]#{2})\nfunction parseColorAndPercentage(cursor: CodeMirror.TreeCursor, referenceText: string): ParamPart[]|null {\n  const parts: ParamPart[] = [];\n  while (cursor.nextSibling()) {\n    if (cursor.name === ',' || cursor.name === ')') {\n      break;\n    }\n\n    if (cursor.name === 'ValueName' || cursor.name === 'CallExpression' || cursor.name === 'ColorLiteral') {\n      parts.push({\n        name: PartName.Value,\n        value: referenceText.substring(cursor.from, cursor.to),\n      });\n    } else if (cursor.name === 'NumberLiteral') {\n      const numberText = referenceText.substring(cursor.from, cursor.to);\n      if (!numberText.includes('%')) {\n        return null;\n      }\n\n      parts.push({\n        name: PartName.Percentage,\n        value: numberText,\n      });\n    } else {\n      return null;\n    }\n  }\n\n  return parts;\n}\n\nfunction parseColorInterpolationMethod(cursor: CodeMirror.TreeCursor, referenceText: string): {\n  name: PartName.InterpolationMethod,\n  value: string,\n}|null {\n  let colorInterpolationMethod = '';\n  while (cursor.nextSibling()) {\n    if (cursor.name === ',') {\n      break;\n    }\n\n    colorInterpolationMethod += referenceText.substring(cursor.from, cursor.to) + ' ';\n  }\n  if (cursor.name !== ',') {\n    return null;\n  }\n\n  return {\n    name: PartName.InterpolationMethod,\n    value: colorInterpolationMethod.trimEnd(),\n  };\n}\n\nfunction isValidParam(param: ParamPart[]): boolean {\n  const hasOneValue = param.filter(paramPart => paramPart.name === PartName.Value).length === 1;\n  const hasAtMostOnePercentage = param.filter(paramPart => paramPart.name === PartName.Percentage).length <= 1;\n  return hasOneValue && hasAtMostOnePercentage;\n}\n\nexport class ColorMixModel {\n  parts: Parts;\n  constructor(parts: Parts) {\n    this.parts = parts;\n  }\n\n  static parse(text: string): ColorMixModel|null {\n    const textToParse = `*{color:${text};}`;\n    const parsed = cssParser.parse(textToParse);\n    // Take the cursor from declaration\n    const cursor = parsed.cursorAt(textToParse.indexOf(':') + 1);\n\n    // Move until the `ArgList`\n    while (cursor.name !== 'ArgList' && cursor.next(true)) {\n    }\n    if (cursor.name !== 'ArgList') {\n      return null;\n    }\n\n    // We're on the `ArgList`, enter into it\n    cursor.firstChild();\n\n    // Parse first argument <color-interpolation-method>\n    const colorInterpolationMethodPart = parseColorInterpolationMethod(cursor, textToParse);\n    if (!colorInterpolationMethodPart) {\n      return null;\n    }\n\n    // Parse first color and percentage\n    const firstColorAndPercentage = parseColorAndPercentage(cursor, textToParse);\n    if (!firstColorAndPercentage) {\n      return null;\n    }\n\n    // Parse second color and percentage\n    const secondColorAndPercentage = parseColorAndPercentage(cursor, textToParse);\n    if (!secondColorAndPercentage) {\n      return null;\n    }\n\n    // Validate correctness of the syntax\n    // * interpolation method should start with `in`\n    if (!colorInterpolationMethodPart.value.startsWith('in')) {\n      return null;\n    }\n\n    // * Parts can't have more than one value\n    // * Parts can't have more than one percentage\n    if (!isValidParam(firstColorAndPercentage) || !isValidParam(secondColorAndPercentage)) {\n      return null;\n    }\n\n    return new ColorMixModel([\n      colorInterpolationMethodPart,\n      {\n        name: PartName.Param,\n        value: firstColorAndPercentage,\n      },\n      {\n        name: PartName.Param,\n        value: secondColorAndPercentage,\n      },\n    ]);\n  }\n}\n\nexport const enum PartName {\n  InterpolationMethod = 'IM',\n  Param = 'PA',\n  Value = 'V',  // Can be anything that represents color (color literal, rgb/hsl/color call, variable etc.)\n  Percentage = 'P',\n}\n\nexport type ParamPart = {\n  name: PartName.Percentage,\n  value: string,\n}|{\n  name: PartName.Value,\n  value: string,\n};\n\ntype Parts = [\n  {\n    name: PartName.InterpolationMethod,\n    value: string,\n  },\n  {\n    name: PartName.Param,\n    value: ParamPart[],\n  },\n  {\n    name: PartName.Param,\n    value: ParamPart[],\n  },\n];\n"]}